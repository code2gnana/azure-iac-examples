# Pipeline to deploy App Gateway v2 multisite listener

name: deployAzureResources
trigger:
- master
variables:
  # $(base64EncodedPfxCertificatePassword) set in variables GUI
  # $(base64EncodedPfxCertificate) set in variables GUI
  # $(serviceConnection) set in variables GUI
  # $(dnsZoneResourceGroupName) set in variables GUI
  # $(dnsZoneName) set in variables GUI
  location: australiaeast
  containerName: 'templates'
  appGwyRecordName: gwy
  timeStamp: $[format('{0:yyyy}-{0:MM}-{0:dd}-{0:HHmmss}', pipeline.startTime)]
stages:
- stage: 'dev'
  displayName: 'dev environment release'
  variables:
    environmentName: dev
    projectName: "$(environmentName)-app-gwy-msl"
    resourceGroupName: "$(projectName)-rg"
    tags: '{"costCentre":"478132","project":"$(projectName)"}'
  jobs:
    - deployment: 
      pool:
        vmImage: 'ubuntu-latest'
      environment: $(environmentName)
      strategy:
       runOnce:
        deploy:
          steps:
          - checkout: self # needed to checkout repo!
          - task: PowerShell@2
            displayName: 'Generate SAS Token Expiry DateTime'
            inputs:
              targetType: 'inline'
              script: |
                $now = Get-Date
                $sasTokenExpiry = $now.AddHours(2).ToString('u') -replace ' ','T'
                Write-Host "##vso[task.setvariable variable=sasTokenExpiry;]$sasTokenExpiry"

          - task: AzureResourceGroupDeployment@2
            name: 'DeployStorage'
            displayName: 'Deploy storage account for ARM templates'
            enabled: true
            inputs:
              action: Create Or Update Resource Group
              azureSubscription: $(serviceConnection)
              resourceGroupName: $(resourceGroupName)
              csmFile: ./nestedtemplates/storage.json
              location: $(location)
              templateLocation: Linked artifact
              deploymentMode: Incremental
              deploymentOutputs: storageDeploymentOutput
              deploymentName: "storageDeployment-$(timeStamp)"
              overrideParameters: -sasTokenExpiry $(sasTokenExpiry) -storageSku Standard_LRS -storageKind StorageV2 -tags $(tags) -containerName $(containerName)
          
          - task: PowerShell@2
            displayName: 'Get Storage Deployment Outputs'
            inputs:
              targetType: 'inline'
              script: |
                $outputs = '$(storageDeploymentOutput)' | ConvertFrom-Json
                foreach ($output in $outputs.PSObject.Properties) {
                  Write-Host "$($output.Name) - $($output.Value.value)"
                  Write-Host "##vso[task.setvariable variable=$($output.Name);]$($output.Value.value)" 
                }

          - task: AzureCLI@1
            displayName: 'Copy ARM template files to Azure blob storage'
            enabled: true
            inputs:
              azureSubscription: $(serviceConnection)
              scriptLocation: 'inlineScript'
              inlineScript: az storage blob upload-batch -d $(containerName) -s ./nestedtemplates/ --account-name $(storageAccountName)
      
          - task: AzureResourceGroupDeployment@2
            name: 'deployResources'
            displayName: 'Deploy resources'
            enabled: true
            inputs:
              action: Create Or Update Resource Group
              azureSubscription: $(serviceConnection)
              resourceGroupName: $(resourceGroupName)
              csmFile: ./azuredeploy.json
              csmParametersFile: ./azuredeploy.parameters.json
              location: $(location)
              templateLocation: Linked artifact
              deploymentMode: Incremental
              deploymentName: "resourceDeployment-$(timeStamp)"
              deploymentOutputs: resourceDeploymentOutput
              overrideParameters: 
                -storageUri "$(storageContainerUri)"
                -sasToken $(storageAccountSasToken)
                -appNames ["front-end","back-end"]
                -pfxCertificate $(base64EncodedPfxCertificate)
                -pfxCertificatePassword $(base64EncodedPfxCertificatePassword)

          - task: PowerShell@2
            displayName: 'Get Storage Deployment Outputs'
            inputs:
              targetType: 'inline'
              script: |
                $outputs = '$(resourceDeploymentOutput)' | ConvertFrom-Json
                foreach ($output in $outputs.PSObject.Properties) {
                  Write-Host "$($output.Name) - $($output.Value.value)"
                  Write-Host "##vso[task.setvariable variable=$($output.Name);]$($output.Value.value)" 
                }
          
          - task: AzureCLI@2
            displayName: 'Create DNS records for App Gateway multi-site listeners'
            inputs:
              scriptLocation: inlineScript
              scriptType: pscore
              azureSubscription: $(serviceConnection)
              inlineScript: |
                $zone = az network dns zone show --resource-group $(dnsZoneResourceGroupName) --name $(dnsZoneName) | ConvertFrom-Json
                $pip = az network public-ip show --resource-group $(resourceGroupName) --name $(appGatewayPublicIpName) | ConvertFrom-Json
                $appGwy = az network application-gateway show --resource-group $(resourceGroupName) --name $(appGatewayName) | ConvertFrom-Json

                Write-Host "adding DNS A record [$(appGwyRecordName)] for ip address [$($pip.ipAddress)]" 
                az network dns record-set a create --resource-group $(dnsZoneResourceGroupName) --name $(appGwyRecordName) --zone-name $zone.Name --ttl 3600 | Out-Null
                az network dns record-set a add-record --resource-group $(dnsZoneResourceGroupName) --zone $zone.Name --record-set-name $(appGwyRecordName) --ipv4-address $pip.ipAddress | Out-Null

                foreach ($hostName in $appGwy.HttpListeners.HostName) {
                  $hostNamePrefix = $hostName -split '\.' | Select-Object -First 1
                  Write-Host "adding DNS CNAME record [$hostNamePrefix] to alias [$(appGwyRecordName).$($zone.Name)]"  
                  az network dns record-set cname create --resource-group $(dnsZoneResourceGroupName) --name $hostNamePrefix --zone-name $zone.Name --ttl 3600 | Out-Null
                  az network dns record-set cname set-record --resource-group $(dnsZoneResourceGroupName) --record-set-name $hostNamePrefix --zone $zone.Name --cname "$(appGwyRecordName).$($zone.Name)" | Out-Null
                }  
