{
	"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"suffix": {
			"type": "string"
		},
		"skuName": {
			"type": "string",
			"defaultValue": "Standard"
		},
		"tier": {
			"type": "string",
			"defaultValue": "Regional"
		},
		"gatewaySku": {
			"type": "object",
			"defaultValue": {
				"name": "WAF_v2",
				"tier": "WAF_v2",
				"capacity": "1"
			}
		},
		"subnetId": {
			"type": "string"
		},
		"frontEndPort": {
			"type": "int",
			"defaultValue": 443
		},
		"requestTimeOut": {
			"type": "int",
			"defaultValue": 180
		},
		"keyVaultUri": {
			"type": "string"
		},
		"keyVaultName": {
			"type": "string"
		},
		"sslCertificateName": {
			"type": "string"
		},
		"apimGatewayHostName": {
			"type": "string"
		},
		"apimPrivateIpAddress": {
			"type": "string"
		}
	},
	"variables": {
		"pipName": "[concat('appgwy-pip', '-', parameters('suffix'))]",
		"pipDomainName": "[variables('appGwyName')]",
		"appGwyName": "[concat('appgwy', '-', parameters('suffix'))]",
		"appGatewayIdentityName": "appGatewayIdentity",
		"appGatewayIdentityID": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('appGatewayIdentityName'))]"
		//"appGwyServiceIdentityResourceId": "[concat(resourceId('Microsoft.ApiManagement/service', variables('appGwyName')),'/providers/Microsoft.ManagedIdentity/Identities/default')]"
	},
	"resources": [
		{
			"type": "Microsoft.Network/publicIPAddresses",
			"apiVersion": "2018-12-01",
			"name": "[variables('pipName')]",
			"location": "[resourceGroup().location]",
			"sku": {
				"name": "[parameters('skuName')]",
				"tier": "[parameters('tier')]"
			},
			"properties": {
				"dnsSettings": {
					"domainNameLabel": "[variables('pipDomainName')]"
				},
				"publicIPAddressVersion": "IPv4",
				"publicIPAllocationMethod": "Static",
				"idleTimeoutInMinutes": 4,
				"ipTags": [
				]
			}
		},
		{
			"name": "[variables('appGatewayIdentityName')]",
			"type": "Microsoft.ManagedIdentity/userAssignedIdentities",
			"apiVersion": "2018-11-30",
			"location": "[resourceGroup().location]"
		},
		{
			"type": "Microsoft.KeyVault/vaults",
			"apiVersion": "2019-09-01",
			"name": "[parameters('keyVaultName')]",
			"location": "[resourceGroup().location]",
			"dependsOn": [
				"[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('appGatewayIdentityName'))]"
			],
			"properties": {
				"sku": {
					"name": "standard",
					"family": "A"
				},
				"tenantId": "[reference(variables('appGatewayIdentityID')).tenantId]",
				"accessPolicies": [
					{
						"tenantId": "[reference(variables('appGatewayIdentityID')).tenantId]",
						"objectId": "[reference(variables('appGatewayIdentityID')).principalId]",
						"permissions": {
							"secrets": [
								"get"
							]
						}
					}
				],
				"enableSoftDelete": true
			}
		},
		{
			"type": "Microsoft.Network/applicationGateways",
			"apiVersion": "2019-11-01",
			"name": "[variables('appGwyName')]",
			"location": "[resourceGroup().location]",
			"dependsOn": [
				"[resourceId('Microsoft.Network/publicIPAddresses', variables('pipName'))]",
				"[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
			],
			"identity": {
				"type": "UserAssigned",
				"userAssignedIdentities": {
					"[variables('appGatewayIdentityID')]": {}
				}
			},
			"zones": [
				"1",
				"2",
				"3"
			],
			"properties": {
				"sku": "[parameters('gatewaySku')]",
				"gatewayIPConfigurations": [
					{
						"name": "gateway-ip",
						"type": "Microsoft.Network/applicationGateways/gatewayIPConfigurations",
						"properties": {
							"subnet": {
								"id": "[parameters('subnetId')]"
							}
						}
					}
				],
				"sslCertificates": [
					{
						"name": "appGatewaySslCert",
						"properties": {
							"keyVaultSecretId": "[concat(parameters('keyVaultUri'), 'secrets/', parameters('sslCertificateName'))]"
						}
					}
				],
				"frontendIPConfigurations": [
					{
						"name": "frontend",
						"type": "Microsoft.Network/applicationGateways/frontendIPConfigurations",
						"properties": {
							"privateIPAllocationMethod": "Dynamic",
							"publicIPAddress": {
								"id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('pipName'))]"
							}
						}
					}
				],
				"frontendPorts": [
					{
						"name": "frontend-port",
						"type": "Microsoft.Network/applicationGateways/frontendPorts",
						"properties": {
							"port": "[parameters('frontEndPort')]"
						}
					}
				],
				"backendAddressPools": [
					{
						"name": "apim-backend",
						"type": "Microsoft.Network/applicationGateways/backendAddressPools",
						"properties": {
							"backendAddresses": [
								{
									"ipAddress": "[parameters('apimPrivateIpAddress')]"
								}
							]
						}
					},
					{
						"name": "sinkpool",
						"type": "Microsoft.Network/applicationGateways/backendAddressPools",
						"properties": {
							"backendAddresses": [
							]
						}
					}
				],
				"backendHttpSettingsCollection": [
					{
						"name": "apim-gateway-poolsetting",
						"type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection",
						"properties": {
							"port": "[parameters('frontEndPort')]",
							"protocol": "Https",
							"cookieBasedAffinity": "Disabled",
							"pickHostNameFromBackendAddress": false,
							"requestTimeout": "[parameters('requestTimeOut')]",
							"probe": {
								"id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('appGwyName')), '/probes/apim-gateway-probe')]"
							}
							/* "authenticationCertificates": [
                                {
                                    "id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('appGwyName')), '/authenticationCertificates/whitelistcert')]"
                                }
                            ] */
						}
					}
				],
				"httpListeners": [
					{
						"name": "apim-gateway-listener",
						"type": "Microsoft.Network/applicationGateways/httpListeners",
						"properties": {
							"frontendIPConfiguration": {
								"id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('appGwyName')), '/frontendIPConfigurations/frontend')]"
							},
							"frontendPort": {
								"id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('appGwyName')), '/frontendPorts/frontend-port')]"
							},
							"protocol": "Https",
							"sslCertificate": {
								"id": "[resourceId('Microsoft.Network/applicationGateways/sslCertificates', variables('appGwyName'), 'appGatewaySslCert')]"
							},
							"hostName": "[parameters('apimGatewayHostName')]",
							"requireServerNameIndication": true,
							"customErrorConfigurations": [
							]
						}
					}
				],
				"urlPathMaps": [
					{
						"name": "external-urlpathmapconfig",
						"type": "Microsoft.Network/applicationGateways/urlPathMaps",
						"properties": {
							"defaultBackendAddressPool": {
								"id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('appGwyName')), '/backendAddressPools/sinkpool')]"
							},
							"defaultBackendHttpSettings": {
								"id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('appGwyName')), '/backendHttpSettingsCollection/apim-gateway-poolsetting')]"
							},
							"pathRules": [
								{
									"name": "external",
									"type": "Microsoft.Network/applicationGateways/urlPathMaps/pathRules",
									"properties": {
										"paths": [
											"/external/*"
										],
										"backendAddressPool": {
											"id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('appGwyName')), '/backendAddressPools/apim-backend')]"
										},
										"backendHttpSettings": {
											"id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('appGwyName')), '/backendHttpSettingsCollection/apim-gateway-poolsetting')]"
										}
									}
								}
							]
						}
					}
				],
				"requestRoutingRules": [
					{
						"name": "apim-gateway-rule",
						"type": "Microsoft.Network/applicationGateways/requestRoutingRules",
						"properties": {
							"ruleType": "PathBasedRouting",
							"httpListener": {
								"id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('appGwyName')), '/httpListeners/apim-gateway-listener')]"
							},
							"urlPathMap": {
								"id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('appGwyName')), '/urlPathMaps/external-urlpathmapconfig')]"
							}
						}
					}
				],
				"probes": [
					{
						"name": "apim-gateway-probe",
						"type": "Microsoft.Network/applicationGateways/probes",
						"properties": {
							"protocol": "Https",
							"host": "[parameters('apimGatewayHostName')]",
							"path": "/status-0123456789abcdef",
							"interval": 30,
							"timeout": 120,
							"unhealthyThreshold": 8,
							"pickHostNameFromBackendHttpSettings": false,
							"minServers": 0,
							"match": {
							}
						}
					}
				],
				"rewriteRuleSets": [
				],
				"redirectConfigurations": [
				],
				"webApplicationFirewallConfiguration": {
					"enabled": true,
					"firewallMode": "Prevention",
					"ruleSetType": "OWASP",
					"ruleSetVersion": "3.0",
					"disabledRuleGroups": [
					],
					"exclusions": [
					],
					"requestBodyCheck": true,
					"maxRequestBodySizeInKb": 128,
					"fileUploadLimitInMb": 100
				},
				"customErrorConfigurations": [
				]
			}
		}
	],
	"outputs": {
		"appGwyID": {
			"type": "string",
			"value": "[resourceId('Microsoft.Network/applicationGateways', variables('appGwyName'))]"
		},
		"appGatewayPublicDnsName": {
			"type": "string",
			"value": "[reference(variables('pipName')).dnsSettings.fqdn]"
		},
		"appGatewayPublicIpAddress": {
			"type": "string",
			"value": "[reference(variables('pipName')).ipAddress]"
		}
	}
}