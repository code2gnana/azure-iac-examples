### spoke.yml ###
trigger:
  branches:
    include:
      - main
      - master
  paths:
    include:
      - bicep/hub-spoke-plink
    exclude:
      - bicep/hub-spoke-plink/pipelines
      - bicep/hub-spoke-plink/modules
      - bicep/hub-spoke-plink/README.md

variables:
  serviceCxn: 'internal_azure_subscription'
  location: 'australiaeast'
  mySqlAdminUserName: 'dbadmin'
  mySqlAdminPassword: 'M1cr0soft1234567890'
  hubResourceGroupName: 'test-hub-rg'
  hubVnetName: 'hub-vnet'
  hubDeploymentName: 'hubDeployment'
  hubVnetId: '/subscriptions/b2375b5f-8dab-4436-b87c-32bc7fdce5d0/resourceGroups/test-hub-rg/providers/Microsoft.Network/virtualNetworks/hub-vnet'
  targets: >
    {
      'internal-spoke':
      {
        'deployment': 'internal-spoke',
        'resourceGroupName': 'int-spoke-rg',
        'spokeVnetName': 'int-spoke-vnet',
        'spokeVnetAddressPrefix': '10.1.0.0/16',
        'plinkSubnetCIDR': '10.1.0.0/24',
        'dbSubnetCIDR': '10.1.1.0/24',
        'appSvcSubnetCIDR': '10.1.2.0/24',
        'containerName': 'belstarr/go-web-api:v1.0'
      },
      'customer-1-spoke':
      {
        'deployment': 'customer-1-spoke',
        'resourceGroupName': 'customer-1-spoke-rg',
        'spokeVnetName': 'customer-1-spoke-vnet',
        'spokeVnetAddressPrefix': '10.2.0.0/16',
        'plinkSubnetCIDR': '10.2.0.0/24',
        'dbSubnetCIDR': '10.2.1.0/24',
        'appSvcSubnetCIDR': '10.2.2.0/24',
        'containerName': 'belstarr/go-web-api:v1.0'
      },
      'customer-2-spoke':
      {
        'deployment': 'customer-2-spoke',
        'resourceGroupName': 'customer-2-spoke-rg',
        'spokeVnetName': 'customer-2-spoke-vnet',
        'spokeVnetAddressPrefix': '10.3.0.0/16',
        'plinkSubnetCIDR': '10.3.0.0/24',
        'dbSubnetCIDR': '10.3.1.0/24',
        'appSvcSubnetCIDR': '10.3.2.0/24',
        'containerName': 'belstarr/go-web-api:v1.0'
      }
    }

pool:
  vmImage: 'ubuntu-latest'    

stages:
  - stage: build
    displayName: 'compile bicep to ARM template'
    jobs:
      - job: compileBicepToARM
        steps:

          - task: AzureCLI@2
            displayName: 'compile Bicep to ARM template'
            inputs:
              azureSubscription: $(serviceCxn)
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |
                az bicep build --file ./bicep/hub-spoke-plink/spoke.bicep
                az bicep build --file ./bicep/hub-spoke-plink/frontDoor.bicep

          - task: CopyFiles@2
            displayName: 'copy ARM template file to staging directory'
            inputs:
              SourceFolder: $(Build.SourcesDirectory)/bicep/hub-spoke-plink
              Contents: '*.json'
              TargetFolder: $(Build.ArtifactStagingDirectory)/templates

          - task: PublishBuildArtifacts@1
            displayName: 'publish ARM template artifacts'
            inputs:
              ArtifactName: 'templates'
              PathtoPublish: $(Build.ArtifactStagingDirectory)/templates

  - stage: deploy
    displayName: 'deploy spoke infrastructure'
    jobs:

      - job: deploySpokeInfra
        displayName: 'deploy spoke'
        strategy:
          matrix: $[ variables.targets ]
        steps:

          - task: DownloadBuildArtifacts@0
            displayName: 'download compiled ARM template'
            inputs:
              buildType: 'current'
              downloadType: 'Single'
              downloadPath: '$(Pipeline.Workspace)'
              artifactName: 'templates'

          - task: AzureCLI@2
            inputs:
              azureSubscription: $(serviceCxn)
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |
                az group create --name $(resourceGroupName) --location $(location)

                $hubDeployment = az group deployment show --name $(hubDeploymentName) | ConvertFrom-Json

                az deployment group create `
                  --name $(deployment) `
                  --template-file $(Pipeline.Workspace)/templates/spoke.json `
                  --resource-group $(resourceGroupName) `
                  --parameters spokeVnetName=$(spokeVnetName) `
                  --parameters mySqlAdminUserName=$(mySqlAdminUserName) `
                  --parameters mySqlAdminPassword=$(mySqlAdminPassword) `
                  --parameters hubVnetId=$hubDeployment.Outputs.vnetId `
                  --parameters hubVnetName=$hubDeployment.Outputs.vnetName `
                  --parameters hubVnetResourceGroup=$hubDeployment.ResourceGroupName `
                  --parameters containerName=$(containerName) `
                  --parameters spokeVnetAddressPrefix=$(spokeVnetAddressPrefix) `
                  --parameter appSvcSubnetCIDR=$(appSvcSubnetCIDR) `
                  --parameter dbSubnetCIDR=$(dbSubnetCIDR) `
                  --parameter plinkSubnetCIDR=$(plinkSubnetCIDR)

          - task: AzureCLI@2
            displayName: 'add web app to Front door configuration'
            inputs:
              azureSubscription: $(serviceCxn)
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |
                $hubDeployment = az group deployment show --name $(hubDeploymentName) | ConvertFrom-Json
                $spokeDeployment = az group deployment show --name $(deployment) | ConvertFrom-Json

                az deployment group create `
                --name $(deployment)-frontdoor `
                --template-file ./frontDoor.json `
                --resource-group $hubDeployment.ResourceGroupName `
                --parameters backendAddress=$spokeDeployment.Outputs.webAppHostName

          - task: AzureCLI@2
            displayName: 'add frontDoor ID to web app access restriction'
            inputs:
              azureSubscription: $(serviceCxn)
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |
                $frontDoorDeployment = az group deployment show --name $(deployment)-frontdoor | ConvertFrom-Json
                
                az webapp config access-restriction add `
                  --resource-group $spokeDeployment.ResourceGroupName `
                  --name $spokeDeployment.webAppName `
                  --priority 400 `
                  --service-tag AzureFrontDoor.Backend `
                  --http-header x-azure-fdid=$frontDoorDeployment.Outputs.FrontDoorId
