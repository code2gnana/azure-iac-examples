{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.4.451.19169",
      "templateHash": "2839049812493884962"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "deployment location"
      }
    },
    "tags": {
      "type": "object",
      "metadata": {
        "description": "resource tags"
      }
    },
    "vNets": {
      "type": "array",
      "metadata": {
        "description": "custom vNet JSON"
      }
    },
    "aksVersion": {
      "type": "string",
      "metadata": {
        "description": "Kubernetes version"
      }
    },
    "aksNodeVmSize": {
      "type": "string",
      "defaultValue": "Standard_D2_v2",
      "metadata": {
        "description": "AKS node VM size"
      }
    },
    "aksNodeCount": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "AKS node count"
      }
    },
    "aksMaxPodCount": {
      "type": "int",
      "defaultValue": 50,
      "metadata": {
        "description": "AKS max pod count per worker node"
      }
    },
    "sshPublicKey": {
      "type": "string",
      "metadata": {
        "description": "AKS nodes SSH Key"
      }
    },
    "dbAdminPassword": {
      "type": "secureString",
      "metadata": {
        "description": "SQL DB server admin password"
      }
    },
    "aadAdminGroupObjectIds": {
      "type": "array",
      "metadata": {
        "description": "Array of AAD principal ObjectIds"
      }
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "admin user name for Linux jump box VM"
      }
    }
  },
  "functions": [],
  "variables": {
    "suffix": "[substring(uniqueString(subscription().subscriptionId, uniqueString(resourceGroup().id)), 0, 6)]",
    "separatedAddressprefix": "[split(parameters('vNets')[0].subnets[0].addressPrefix, '.')]",
    "firewallPrivateIpAddress": "[format('{0}.{1}.{2}.4', variables('separatedAddressprefix')[0], variables('separatedAddressprefix')[1], variables('separatedAddressprefix')[2])]",
    "sqlPrivateDnsZoneName": "[format('privatelink{0}', environment().suffixes.sqlServerHostname)]",
    "sqlGroupType": "sqlServer",
    "workspaceName": "[format('wks-{0}', variables('suffix'))]"
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2020-03-01-preview",
      "name": "[variables('workspaceName')]",
      "location": "[parameters('location')]",
      "properties": {
        "sku": {
          "name": "Standalone"
        },
        "retentionInDays": 30
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "module-udr",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "suffix": {
            "value": "[variables('suffix')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "azureFirewallPrivateIpAddress": {
            "value": "[variables('firewallPrivateIpAddress')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.451.19169",
              "templateHash": "3341485444137292663"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "metadata": {
                "description": "location to deploy the storage account"
              }
            },
            "suffix": {
              "type": "string"
            },
            "azureFirewallPrivateIpAddress": {
              "type": "string"
            }
          },
          "functions": [],
          "resources": [
            {
              "type": "Microsoft.Network/routeTables",
              "apiVersion": "2018-11-01",
              "name": "[format('default-firewall-rt-{0}', parameters('suffix'))]",
              "location": "[parameters('location')]",
              "properties": {
                "disableBgpRoutePropagation": false,
                "routes": [
                  {
                    "name": "default-fw-route",
                    "type": "Microsoft.Network/routeTables/routes",
                    "properties": {
                      "addressPrefix": "0.0.0.0/0",
                      "nextHopType": "VirtualAppliance",
                      "nextHopIpAddress": "[parameters('azureFirewallPrivateIpAddress')]"
                    }
                  }
                ]
              }
            }
          ]
        }
      }
    },
    {
      "copy": {
        "name": "module_vnet",
        "count": "[length(parameters('vNets'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "[format('module-vnet-{0}', copyIndex())]",
      "resourceGroup": "[resourceGroup().name]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "suffix": {
            "value": "[variables('suffix')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "vNet": {
            "value": "[parameters('vNets')[copyIndex()]]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.451.19169",
              "templateHash": "5904687121113453059"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "metadata": {
                "description": "location to deploy the storage account"
              }
            },
            "suffix": {
              "type": "string"
            },
            "vNet": {
              "type": "object"
            },
            "tags": {
              "type": "object"
            }
          },
          "functions": [],
          "variables": {
            "copy": [
              {
                "name": "subnets",
                "count": "[length(range(0, length(parameters('vNet').subnets)))]",
                "input": {
                  "name": "[parameters('vNet').subnets[range(0, length(parameters('vNet').subnets))[copyIndex('subnets')]].name]",
                  "properties": {
                    "addressPrefix": "[parameters('vNet').subnets[range(0, length(parameters('vNet').subnets))[copyIndex('subnets')]].addressPrefix]",
                    "routeTable": "[if(equals(parameters('vNet').subnets[range(0, length(parameters('vNet').subnets))[copyIndex('subnets')]].udrName, json('null')), json('null'), json(format('{{\"id\": \"{0}\"}}\"}}', resourceId('Microsoft.Network/routeTables', format('{0}-rt-{1}', parameters('vNet').subnets[range(0, length(parameters('vNet').subnets))[copyIndex('subnets')]].udrName, parameters('suffix'))))))]",
                    "networkSecurityGroup": "[if(equals(parameters('vNet').subnets[range(0, length(parameters('vNet').subnets))[copyIndex('subnets')]].nsgName, json('null')), json('null'), json(format('{{\"id\": \"{0}\"}}\"}}', resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-nsg-{1}', parameters('vNet').subnets[range(0, length(parameters('vNet').subnets))[copyIndex('subnets')]].nsgName, parameters('suffix'))))))]",
                    "privateEndpointNetworkPolicies": "[if(equals(parameters('vNet').subnets[range(0, length(parameters('vNet').subnets))[copyIndex('subnets')]].privateEndpointNetworkPolicies, json('null')), json('null'), parameters('vNet').subnets[range(0, length(parameters('vNet').subnets))[copyIndex('subnets')]].privateEndpointNetworkPolicies)]",
                    "privateLinkServiceNetworkPolicies": "[if(equals(parameters('vNet').subnets[range(0, length(parameters('vNet').subnets))[copyIndex('subnets')]].privateLinkServiceNetworkPolicies, json('null')), json('null'), parameters('vNet').subnets[range(0, length(parameters('vNet').subnets))[copyIndex('subnets')]].privateLinkServiceNetworkPolicies)]"
                  },
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets/', format('{0}-{1}', parameters('vNet').name, parameters('suffix')), parameters('vNet').subnets[range(0, length(parameters('vNet').subnets))[copyIndex('subnets')]].name)]"
                }
              }
            ]
          },
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2018-11-01",
              "name": "[format('{0}-{1}', parameters('vNet').name, parameters('suffix'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "addressSpace": {
                  "addressPrefixes": "[parameters('vNet').addressPrefixes]"
                },
                "subnets": "[variables('subnets')]"
              }
            }
          ],
          "outputs": {
            "subnetRefs": {
              "type": "array",
              "value": "[variables('subnets')]"
            },
            "vnetRef": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks', format('{0}-{1}', parameters('vNet').name, parameters('suffix')))]"
            },
            "vnetName": {
              "type": "string",
              "value": "[format('{0}-{1}', parameters('vNet').name, parameters('suffix'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'module-udr')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "module-peering",
      "resourceGroup": "[resourceGroup().name]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "suffix": {
            "value": "[variables('suffix')]"
          },
          "vNets": {
            "value": "[parameters('vNets')]"
          },
          "isGatewayDeployed": {
            "value": false
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.451.19169",
              "templateHash": "5408050545242822999"
            }
          },
          "parameters": {
            "suffix": {
              "type": "string",
              "metadata": {
                "description": "naming suffix based on resource group name hash"
              }
            },
            "vNets": {
              "type": "array",
              "metadata": {
                "description": "array of JSON virtual network objects"
              }
            },
            "isGatewayDeployed": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "functions": [],
          "resources": [
            {
              "copy": {
                "name": "hub_peering_to_spoke",
                "count": "[length(range(0, sub(length(parameters('vNets')), 1)))]"
              },
              "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
              "apiVersion": "2018-11-01",
              "name": "[format('{0}-{1}/peering-to-{2}-{3}', parameters('vNets')[0].name, parameters('suffix'), parameters('vNets')[add(range(0, sub(length(parameters('vNets')), 1))[copyIndex()], 1)].name, parameters('suffix'))]",
              "properties": {
                "allowVirtualNetworkAccess": true,
                "allowForwardedTraffic": true,
                "allowGatewayTransit": "[parameters('isGatewayDeployed')]",
                "useRemoteGateways": false,
                "remoteVirtualNetwork": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks', format('{0}-{1}', parameters('vNets')[add(range(0, sub(length(parameters('vNets')), 1))[copyIndex()], 1)].name, parameters('suffix')))]"
                }
              }
            },
            {
              "copy": {
                "name": "spoke_peering_to_hub",
                "count": "[length(range(0, sub(length(parameters('vNets')), 1)))]"
              },
              "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
              "apiVersion": "2018-11-01",
              "name": "[format('{0}-{1}/peering-to-{2}-{3}', parameters('vNets')[add(range(0, sub(length(parameters('vNets')), 1))[copyIndex()], 1)].name, parameters('suffix'), parameters('vNets')[0].name, parameters('suffix'))]",
              "properties": {
                "allowVirtualNetworkAccess": true,
                "allowForwardedTraffic": true,
                "allowGatewayTransit": false,
                "useRemoteGateways": "[parameters('isGatewayDeployed')]",
                "remoteVirtualNetwork": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks', format('{0}-{1}', parameters('vNets')[0].name, parameters('suffix')))]"
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "module_vnet"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "module-vm",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "suffix": {
            "value": "[variables('suffix')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "vmName": {
            "value": "jump-box-vm"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "authenticationType": {
            "value": "sshPublicKey"
          },
          "adminPasswordOrKey": {
            "value": "[parameters('sshPublicKey')]"
          },
          "ubuntuOSVersion": {
            "value": "18.04-LTS"
          },
          "vmSize": {
            "value": "Standard_B2s"
          },
          "subnetRef": {
            "value": "[reference('Microsoft.Resources/deployments/module-vnet-0').outputs.subnetRefs.value[1].id]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.451.19169",
              "templateHash": "17082914294482366824"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "metadata": {
                "description": "location to deploy the storage account"
              }
            },
            "suffix": {
              "type": "string",
              "metadata": {
                "description": "Naming suffix"
              }
            },
            "vmName": {
              "type": "string",
              "defaultValue": "simpleLinuxVM",
              "metadata": {
                "description": "The name of you Virtual Machine."
              }
            },
            "adminUsername": {
              "type": "string",
              "metadata": {
                "description": "Username for the Virtual Machine."
              }
            },
            "authenticationType": {
              "type": "string",
              "defaultValue": "sshPublicKey",
              "allowedValues": [
                "sshPublicKey",
                "password"
              ],
              "metadata": {
                "description": "Type of authentication to use on the Virtual Machine. SSH key is recommended."
              }
            },
            "adminPasswordOrKey": {
              "type": "string",
              "metadata": {
                "description": "SSH Key or password for the Virtual Machine. SSH key is recommended."
              }
            },
            "ubuntuOSVersion": {
              "type": "string",
              "defaultValue": "18.04-LTS",
              "allowedValues": [
                "12.04.5-LTS",
                "14.04.5-LTS",
                "16.04.0-LTS",
                "18.04-LTS"
              ],
              "metadata": {
                "description": "The Ubuntu version for the VM. This will pick a fully patched image of this given Ubuntu version."
              }
            },
            "vmSize": {
              "type": "string",
              "defaultValue": "Standard_B2s",
              "metadata": {
                "description": "The size of the VM"
              }
            },
            "subnetRef": {
              "type": "string",
              "defaultValue": "Subnet",
              "metadata": {
                "description": "Resource Id of the subnet in the virtual network"
              }
            }
          },
          "functions": [],
          "variables": {
            "networkInterfaceName": "[format('{0}-nic-{1}', parameters('vmName'), parameters('suffix'))]",
            "nsgName": "[format('{0}-nsg-{1}', parameters('vmName'), parameters('suffix'))]",
            "osDiskType": "Standard_LRS",
            "linuxConfiguration": {
              "disablePasswordAuthentication": true,
              "ssh": {
                "publicKeys": [
                  {
                    "path": "[format('/home/{0}/.ssh/authorized_keys', parameters('adminUsername'))]",
                    "keyData": "[parameters('adminPasswordOrKey')]"
                  }
                ]
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2018-10-01",
              "name": "[variables('networkInterfaceName')]",
              "location": "[parameters('location')]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig1",
                    "properties": {
                      "subnet": {
                        "id": "[parameters('subnetRef')]"
                      },
                      "privateIPAllocationMethod": "Dynamic"
                    }
                  }
                ],
                "networkSecurityGroup": {
                  "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2019-02-01",
              "name": "[variables('nsgName')]",
              "location": "[parameters('location')]",
              "properties": {
                "securityRules": [
                  {
                    "name": "SSH",
                    "properties": {
                      "priority": 1000,
                      "protocol": "Tcp",
                      "access": "Allow",
                      "direction": "Inbound",
                      "sourceAddressPrefix": "*",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "*",
                      "destinationPortRange": "22"
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2019-03-01",
              "name": "[parameters('vmName')]",
              "location": "[parameters('location')]",
              "properties": {
                "hardwareProfile": {
                  "vmSize": "[parameters('vmSize')]"
                },
                "storageProfile": {
                  "osDisk": {
                    "createOption": "FromImage",
                    "managedDisk": {
                      "storageAccountType": "[variables('osDiskType')]"
                    }
                  },
                  "imageReference": {
                    "publisher": "Canonical",
                    "offer": "UbuntuServer",
                    "sku": "[parameters('ubuntuOSVersion')]",
                    "version": "latest"
                  }
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName'))]"
                    }
                  ]
                },
                "osProfile": {
                  "computerName": "[parameters('vmName')]",
                  "adminUsername": "[parameters('adminUsername')]",
                  "adminPassword": "[parameters('adminPasswordOrKey')]",
                  "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName'))]"
              ]
            }
          ],
          "outputs": {
            "vmPrivateIp": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName'))).ipConfigurations[0].properties.privateIPAddress]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'module-peering')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "module-firewall",
      "resourceGroup": "[resourceGroup().name]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "suffix": {
            "value": "[variables('suffix')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "firewallSubnetRef": {
            "value": "[reference('Microsoft.Resources/deployments/module-vnet-0').outputs.subnetRefs.value[0].id]"
          },
          "sourceAddressRangePrefixes": {
            "value": "[union(reference('Microsoft.Resources/deployments/module-vnet-0').outputs.subnetRefs.value, reference('Microsoft.Resources/deployments/module-vnet-1').outputs.subnetRefs.value)]"
          },
          "vmPrivateIp": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'module-vm'), '2019-10-01').outputs.vmPrivateIp.value]"
          },
          "workspaceRef": {
            "value": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName'))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.451.19169",
              "templateHash": "1667048181193069671"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "metadata": {
                "description": "location to deploy the storage account"
              }
            },
            "suffix": {
              "type": "string"
            },
            "firewallSubnetRef": {
              "type": "string"
            },
            "sourceAddressRangePrefixes": {
              "type": "array"
            },
            "vmPrivateIp": {
              "type": "string"
            },
            "workspaceRef": {
              "type": "string"
            }
          },
          "functions": [],
          "variables": {
            "copy": [
              {
                "name": "sourceAddresses",
                "count": "[length(parameters('sourceAddressRangePrefixes'))]",
                "input": "[parameters('sourceAddressRangePrefixes')[copyIndex('sourceAddresses')].properties.addressPrefix]"
              }
            ],
            "publicIpName": "[format('fw-pip-{0}', parameters('suffix'))]",
            "firewallName": "[format('fw-{0}', parameters('suffix'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Network/publicIPAddresses",
              "apiVersion": "2020-03-01",
              "name": "[variables('publicIpName')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "Standard"
              },
              "properties": {
                "publicIPAllocationMethod": "Static",
                "publicIPAddressVersion": "IPv4"
              }
            },
            {
              "type": "Microsoft.Network/azureFirewalls",
              "apiVersion": "2021-03-01",
              "name": "[variables('firewallName')]",
              "location": "[parameters('location')]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig",
                    "properties": {
                      "subnet": {
                        "id": "[parameters('firewallSubnetRef')]"
                      },
                      "publicIPAddress": {
                        "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpName'))]"
                      }
                    }
                  }
                ],
                "natRuleCollections": [
                  {
                    "name": "jumpbox",
                    "properties": {
                      "priority": 100,
                      "action": {
                        "type": "Dnat"
                      },
                      "rules": [
                        {
                          "name": "dnat-to-jumpbox",
                          "sourceAddresses": [
                            "*"
                          ],
                          "destinationAddresses": [
                            "[reference(resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpName'))).ipAddress]"
                          ],
                          "destinationPorts": [
                            "22"
                          ],
                          "protocols": [
                            "TCP"
                          ],
                          "translatedAddress": "[parameters('vmPrivateIp')]",
                          "translatedPort": "22"
                        }
                      ]
                    }
                  }
                ],
                "applicationRuleCollections": [
                  {
                    "name": "aks",
                    "properties": {
                      "priority": 100,
                      "action": {
                        "type": "Allow"
                      },
                      "rules": [
                        {
                          "name": "allow-aks",
                          "sourceAddresses": "[variables('sourceAddresses')]",
                          "protocols": [
                            {
                              "protocolType": "Http",
                              "port": 80
                            },
                            {
                              "protocolType": "Https",
                              "port": 443
                            }
                          ],
                          "targetFqdns": [
                            "*.azmk8s.io",
                            "*auth.docker.io",
                            "*cloudflare.docker.io",
                            "*cloudflare.docker.com",
                            "*registry-1.docker.io"
                          ]
                        }
                      ]
                    }
                  },
                  {
                    "name": "oss",
                    "properties": {
                      "priority": 200,
                      "action": {
                        "type": "Allow"
                      },
                      "rules": [
                        {
                          "name": "allow-oss",
                          "sourceAddresses": "[variables('sourceAddresses')]",
                          "protocols": [
                            {
                              "protocolType": "Http",
                              "port": 80
                            },
                            {
                              "protocolType": "Https",
                              "port": 443
                            }
                          ],
                          "targetFqdns": [
                            "download.opensuse.org",
                            "*.ubuntu.com",
                            "github.com",
                            "gcr.io",
                            "*.github.com",
                            "raw.githubusercontent.com",
                            "*.ubuntu.com",
                            "api.snapcraft.io",
                            "download.opensuse.org",
                            "storage.googleapis.com",
                            "security.ubuntu.com",
                            "azure.archive.ubuntu.com",
                            "changelogs.ubuntu.com"
                          ]
                        }
                      ]
                    }
                  },
                  {
                    "name": "azure",
                    "properties": {
                      "priority": 300,
                      "action": {
                        "type": "Allow"
                      },
                      "rules": [
                        {
                          "name": "allow-sites",
                          "sourceAddresses": "[variables('sourceAddresses')]",
                          "protocols": [
                            {
                              "protocolType": "Http",
                              "port": 80
                            },
                            {
                              "protocolType": "Https",
                              "port": 443
                            }
                          ],
                          "targetFqdns": [
                            "dc.services.visualstudio.com",
                            "*.opinsights.azure.com",
                            "login.microsoftonline.com",
                            "*azurecr.io",
                            "*.blob.core.windows.net",
                            "*.trafficmanager.net",
                            "*.azureedge.net",
                            "*.microsoft.com",
                            "*.core.windows.net",
                            "aka.ms",
                            "*.azure-automation.net",
                            "*.azure.com",
                            "gov-prod-policy-data.trafficmanager.net",
                            "[format('*.gk.{0}.azmk8s.io', parameters('location'))]",
                            "*.monitoring.azure.com",
                            "*.oms.opinsights.azure.com",
                            "*.ods.opinsights.azure.com",
                            "*.microsoftonline.com",
                            "*.data.mcr.microsoft.com",
                            "*.cdn.mscr.io",
                            "mcr.microsoft.com",
                            "management.azure.com",
                            "login.microsoftonline.com",
                            "packages.microsoft.com"
                          ]
                        }
                      ]
                    }
                  }
                ],
                "networkRuleCollections": [
                  {
                    "name": "netRulesCollection",
                    "properties": {
                      "priority": 100,
                      "action": {
                        "type": "Allow"
                      },
                      "rules": [
                        {
                          "name": "allow-ssh-inbound-internet",
                          "sourceAddresses": [
                            "[reference(resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpName'))).ipAddress]"
                          ],
                          "destinationAddresses": [
                            "[format('{0}/32', parameters('vmPrivateIp'))]"
                          ],
                          "destinationPorts": [
                            "22"
                          ],
                          "protocols": [
                            "TCP"
                          ]
                        },
                        {
                          "name": "allow-outbound-http-https-internet",
                          "sourceAddresses": "[variables('sourceAddresses')]",
                          "destinationAddresses": [
                            "*"
                          ],
                          "destinationPorts": [
                            "80",
                            "443",
                            "53",
                            "123"
                          ],
                          "protocols": [
                            "TCP",
                            "UDP",
                            "ICMP"
                          ]
                        }
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpName'))]"
              ]
            }
          ],
          "outputs": {
            "firewallPublicIpAddress": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpName'))).ipAddress]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'module-vm')]",
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "module-aks",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "suffix": {
            "value": "[variables('suffix')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "aksVersion": {
            "value": "[parameters('aksVersion')]"
          },
          "aksSubnetRef": {
            "value": "[reference('Microsoft.Resources/deployments/module-vnet-1').outputs.subnetRefs.value[0].id]"
          },
          "appGwySubnetPrefix": {
            "value": "10.1.2.0/24"
          },
          "aksNodeVMSize": {
            "value": "[parameters('aksNodeVmSize')]"
          },
          "aksNodeCount": {
            "value": "[parameters('aksNodeCount')]"
          },
          "maxPods": {
            "value": "[parameters('aksMaxPodCount')]"
          },
          "aadAdminGroupObjectIdList": {
            "value": "[parameters('aadAdminGroupObjectIds')]"
          },
          "workspaceRef": {
            "value": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName'))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.451.19169",
              "templateHash": "7840564855218405751"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "metadata": {
                "description": "location to deploy the storage account"
              }
            },
            "aksDnsPrefix": {
              "type": "string",
              "defaultValue": "aks",
              "metadata": {
                "description": "Optional DNS prefix to use with hosted Kubernetes API server FQDN."
              }
            },
            "aksNodeOsDiskSizeGB": {
              "type": "int",
              "defaultValue": 40,
              "maxValue": 1023,
              "minValue": 30,
              "metadata": {
                "description": "Disk size (in GB) to provision for each of the agent pool nodes. This value ranges from 30 to 1023."
              }
            },
            "networkPlugin": {
              "type": "string",
              "defaultValue": "azure",
              "allowedValues": [
                "azure",
                "kubenet"
              ],
              "metadata": {
                "description": "CNI plugin 'kubenet' or 'azure'"
              }
            },
            "aksNodeCount": {
              "type": "int",
              "defaultValue": 1,
              "maxValue": 50,
              "minValue": 1,
              "metadata": {
                "description": "The default number of agent nodes for the cluster."
              }
            },
            "enableAutoScaling": {
              "type": "bool",
              "defaultValue": true
            },
            "aksMinNodeCount": {
              "type": "int",
              "defaultValue": 1,
              "maxValue": 50,
              "minValue": 1,
              "metadata": {
                "description": "The minimum number of agent nodes for the cluster."
              }
            },
            "aksMaxNodeCount": {
              "type": "int",
              "defaultValue": 5,
              "maxValue": 50,
              "minValue": 1,
              "metadata": {
                "description": "The maximum number of agent nodes for the cluster."
              }
            },
            "maxPods": {
              "type": "int",
              "defaultValue": 30,
              "metadata": {
                "description": "The maximum number of pods per AKS worker node"
              }
            },
            "aksNodeVMSize": {
              "type": "string",
              "defaultValue": "Standard_F2",
              "allowedValues": [
                "Standard_A0",
                "Standard_A1",
                "Standard_A10",
                "Standard_A11",
                "Standard_A1_v2",
                "Standard_A2",
                "Standard_A2_v2",
                "Standard_A2m_v2",
                "Standard_A3",
                "Standard_A4",
                "Standard_A4_v2",
                "Standard_A4m_v2",
                "Standard_A5",
                "Standard_A6",
                "Standard_A7",
                "Standard_A8",
                "Standard_A8_v2",
                "Standard_A8m_v2",
                "Standard_A9",
                "Standard_B1ms",
                "Standard_B1s",
                "Standard_B2ms",
                "Standard_B2s",
                "Standard_B4ms",
                "Standard_B8ms",
                "Standard_D1",
                "Standard_D11",
                "Standard_D11_v2",
                "Standard_D11_v2_Promo",
                "Standard_D12",
                "Standard_D12_v2",
                "Standard_D12_v2_Promo",
                "Standard_D13",
                "Standard_D13_v2",
                "Standard_D13_v2_Promo",
                "Standard_D14",
                "Standard_D14_v2",
                "Standard_D14_v2_Promo",
                "Standard_D15_v2",
                "Standard_D16_v3",
                "Standard_D16s_v3",
                "Standard_D1_v2",
                "Standard_D2",
                "Standard_D2_v2",
                "Standard_D2_v2_Promo",
                "Standard_D2_v3",
                "Standard_D2s_v3",
                "Standard_D3",
                "Standard_D32_v3",
                "Standard_D32s_v3",
                "Standard_D3_v2",
                "Standard_D3_v2_Promo",
                "Standard_D4",
                "Standard_D4_v2",
                "Standard_D4_v2_Promo",
                "Standard_D4_v3",
                "Standard_D4s_v3",
                "Standard_D5_v2",
                "Standard_D5_v2_Promo",
                "Standard_D64_v3",
                "Standard_D64s_v3",
                "Standard_D8_v3",
                "Standard_D8s_v3",
                "Standard_DS1",
                "Standard_DS11",
                "Standard_DS11-1_v2",
                "Standard_DS11_v2",
                "Standard_DS11_v2_Promo",
                "Standard_DS12",
                "Standard_DS12-1_v2",
                "Standard_DS12-2_v2",
                "Standard_DS12_v2",
                "Standard_DS12_v2_Promo",
                "Standard_DS13",
                "Standard_DS13-2_v2",
                "Standard_DS13-4_v2",
                "Standard_DS13_v2",
                "Standard_DS13_v2_Promo",
                "Standard_DS14",
                "Standard_DS14-4_v2",
                "Standard_DS14-8_v2",
                "Standard_DS14_v2",
                "Standard_DS14_v2_Promo",
                "Standard_DS15_v2",
                "Standard_DS1_v2",
                "Standard_DS2",
                "Standard_DS2_v2",
                "Standard_DS2_v2_Promo",
                "Standard_DS3",
                "Standard_DS3_v2",
                "Standard_DS3_v2_Promo",
                "Standard_DS4",
                "Standard_DS4_v2",
                "Standard_DS4_v2_Promo",
                "Standard_DS5_v2",
                "Standard_DS5_v2_Promo",
                "Standard_E16-4s_v3",
                "Standard_E16-8s_v3",
                "Standard_E16_v3",
                "Standard_E16s_v3",
                "Standard_E2_v3",
                "Standard_E2s_v3",
                "Standard_E32-16s_v3",
                "Standard_E32-8s_v3",
                "Standard_E32_v3",
                "Standard_E32s_v3",
                "Standard_E4-2s_v3",
                "Standard_E4_v3",
                "Standard_E4s_v3",
                "Standard_E64-16s_v3",
                "Standard_E64-32s_v3",
                "Standard_E64_v3",
                "Standard_E64i_v3",
                "Standard_E64is_v3",
                "Standard_E64s_v3",
                "Standard_E8-2s_v3",
                "Standard_E8-4s_v3",
                "Standard_E8_v3",
                "Standard_E8s_v3",
                "Standard_F1",
                "Standard_F16",
                "Standard_F16s",
                "Standard_F16s_v2",
                "Standard_F1s",
                "Standard_F2",
                "Standard_F2s",
                "Standard_F2s_v2",
                "Standard_F32s_v2",
                "Standard_F4",
                "Standard_F4s",
                "Standard_F4s_v2",
                "Standard_F64s_v2",
                "Standard_F72s_v2",
                "Standard_F8",
                "Standard_F8s",
                "Standard_F8s_v2",
                "Standard_G1",
                "Standard_G2",
                "Standard_G3",
                "Standard_G4",
                "Standard_G5",
                "Standard_GS1",
                "Standard_GS2",
                "Standard_GS3",
                "Standard_GS4",
                "Standard_GS4-4",
                "Standard_GS4-8",
                "Standard_GS5",
                "Standard_GS5-16",
                "Standard_GS5-8",
                "Standard_H16",
                "Standard_H16m",
                "Standard_H16mr",
                "Standard_H16r",
                "Standard_H8",
                "Standard_H8m",
                "Standard_L16s",
                "Standard_L16s_v2",
                "Standard_L32s",
                "Standard_L4s",
                "Standard_L8s",
                "Standard_L8s_v2",
                "Standard_M128",
                "Standard_M128-32ms",
                "Standard_M128-64ms",
                "Standard_M128m",
                "Standard_M128ms",
                "Standard_M128s",
                "Standard_M16-4ms",
                "Standard_M16-8ms",
                "Standard_M16ms",
                "Standard_M32-16ms",
                "Standard_M32-8ms",
                "Standard_M32ls",
                "Standard_M32ms",
                "Standard_M32ts",
                "Standard_M64",
                "Standard_M64-16ms",
                "Standard_M64-32ms",
                "Standard_M64ls",
                "Standard_M64m",
                "Standard_M64ms",
                "Standard_M64s",
                "Standard_M8-2ms",
                "Standard_M8-4ms",
                "Standard_M8ms",
                "Standard_NC12",
                "Standard_NC12s_v2",
                "Standard_NC12s_v3",
                "Standard_NC24",
                "Standard_NC24r",
                "Standard_NC24rs_v2",
                "Standard_NC24rs_v3",
                "Standard_NC24s_v2",
                "Standard_NC24s_v3",
                "Standard_NC6",
                "Standard_NC6s_v2",
                "Standard_NC6s_v3",
                "Standard_ND12s",
                "Standard_ND24rs",
                "Standard_ND24s",
                "Standard_ND6s",
                "Standard_NV12",
                "Standard_NV24",
                "Standard_NV6"
              ],
              "metadata": {
                "description": "The size of the Virtual Machine."
              }
            },
            "aksVersion": {
              "type": "string",
              "metadata": {
                "description": "The version of Kubernetes."
              }
            },
            "aksSubnetRef": {
              "type": "string"
            },
            "suffix": {
              "type": "string"
            },
            "aksEnableRBAC": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Enable RBAC on the AKS cluster."
              }
            },
            "aadAdminGroupObjectIdList": {
              "type": "array",
              "metadata": {
                "description": "list of AAD objectID GUIDs"
              }
            },
            "workspaceRef": {
              "type": "string",
              "metadata": {
                "description": "Log Analytics workspace resource id"
              }
            },
            "appGwySubnetPrefix": {
              "type": "string"
            }
          },
          "functions": [],
          "variables": {
            "aksClusterName_var": "[format('aks-{0}', parameters('suffix'))]",
            "appGwyName": "[format('appgwy-{0}', parameters('suffix'))]"
          },
          "resources": [
            {
              "type": "Microsoft.ContainerService/managedClusters",
              "apiVersion": "2020-03-01",
              "name": "[variables('aksClusterName_var')]",
              "location": "[parameters('location')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "kubernetesVersion": "[parameters('aksVersion')]",
                "enableRBAC": "[parameters('aksEnableRBAC')]",
                "dnsPrefix": "[parameters('aksDnsPrefix')]",
                "addonProfiles": {
                  "omsagent": {
                    "enabled": true,
                    "config": {
                      "logAnalyticsWorkspaceResourceID": "[parameters('workspaceRef')]"
                    }
                  },
                  "IngressApplicationGateway": {
                    "enabled": true,
                    "config": {
                      "applicationGatewayName": "[variables('appGwyName')]",
                      "subnetPrefix": "[parameters('appGwySubnetPrefix')]"
                    }
                  }
                },
                "apiServerAccessProfile": {
                  "enablePrivateCluster": true
                },
                "aadProfile": {
                  "managed": true,
                  "adminGroupObjectIDs": "[parameters('aadAdminGroupObjectIdList')]"
                },
                "agentPoolProfiles": [
                  {
                    "name": "systempool",
                    "osDiskSizeGB": "[parameters('aksNodeOsDiskSizeGB')]",
                    "count": "[parameters('aksNodeCount')]",
                    "minCount": "[parameters('aksMinNodeCount')]",
                    "maxCount": "[parameters('aksMaxNodeCount')]",
                    "maxPods": "[parameters('maxPods')]",
                    "vmSize": "[parameters('aksNodeVMSize')]",
                    "osType": "Linux",
                    "type": "VirtualMachineScaleSets",
                    "vnetSubnetID": "[parameters('aksSubnetRef')]",
                    "enableAutoScaling": "[parameters('enableAutoScaling')]",
                    "mode": "System",
                    "availabilityZones": [
                      "1",
                      "2",
                      "3"
                    ]
                  },
                  {
                    "name": "userpool1",
                    "osDiskSizeGB": "[parameters('aksNodeOsDiskSizeGB')]",
                    "count": "[parameters('aksNodeCount')]",
                    "minCount": "[parameters('aksMinNodeCount')]",
                    "maxCount": "[parameters('aksMaxNodeCount')]",
                    "maxPods": "[parameters('maxPods')]",
                    "vmSize": "[parameters('aksNodeVMSize')]",
                    "osType": "Linux",
                    "type": "VirtualMachineScaleSets",
                    "vnetSubnetID": "[parameters('aksSubnetRef')]",
                    "enableAutoScaling": "[parameters('enableAutoScaling')]",
                    "mode": "User",
                    "availabilityZones": [
                      "1",
                      "2",
                      "3"
                    ]
                  }
                ],
                "networkProfile": {
                  "networkPlugin": "[parameters('networkPlugin')]",
                  "serviceCidr": "10.100.0.0/16",
                  "dnsServiceIP": "10.100.0.10",
                  "dockerBridgeCidr": "172.17.0.1/16",
                  "outboundType": "userDefinedRouting",
                  "loadBalancerSku": "standard"
                }
              }
            }
          ],
          "outputs": {
            "aksClusterName": {
              "type": "string",
              "value": "[variables('aksClusterName_var')]"
            },
            "aksControlPlanePrivateFQDN": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ContainerService/managedClusters', variables('aksClusterName_var'))).privateFQDN]"
            },
            "aksNodeResourceGroupName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ContainerService/managedClusters', variables('aksClusterName_var'))).nodeResourceGroup]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'module-firewall')]",
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "module-privateDnsLink",
      "resourceGroup": "[format('MC_{0}_aks-{1}_{2}', resourceGroup().name, variables('suffix'), resourceGroup().location)]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "privateDnsName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'module-aks'), '2019-10-01').outputs.aksControlPlanePrivateFQDN.value]"
          },
          "vnetName": {
            "value": "[reference('Microsoft.Resources/deployments/module-vnet-0').outputs.vnetName.value]"
          },
          "vnetResourceGroupName": {
            "value": "[resourceGroup().name]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.451.19169",
              "templateHash": "4854619973009611282"
            }
          },
          "parameters": {
            "privateDnsName": {
              "type": "string"
            },
            "vnetName": {
              "type": "string"
            },
            "vnetResourceGroupName": {
              "type": "string"
            }
          },
          "functions": [],
          "variables": {
            "separatedDnsName": "[split(parameters('privateDnsName'), '.')]",
            "dnsZoneName": "[format('{0}.{1}.{2}.{3}.{4}', variables('separatedDnsName')[1], variables('separatedDnsName')[2], variables('separatedDnsName')[3], variables('separatedDnsName')[4], variables('separatedDnsName')[5])]"
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2018-09-01",
              "name": "[format('{0}/{1}', variables('dnsZoneName'), parameters('vnetName'))]",
              "location": "global",
              "properties": {
                "virtualNetwork": {
                  "id": "[resourceId(parameters('vnetResourceGroupName'), 'Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
                },
                "registrationEnabled": false
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'module-aks')]"
      ]
    },
    {
      "condition": "[true()]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "module-sqldb",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "suffix": {
            "value": "[variables('suffix')]"
          },
          "sqlDBName": {
            "value": "SampleDB"
          },
          "location": {
            "value": "[resourceGroup().location]"
          },
          "administratorLogin": {
            "value": "dbadmin"
          },
          "administratorLoginPassword": {
            "value": "[parameters('dbAdminPassword')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.451.19169",
              "templateHash": "4313520054301513599"
            }
          },
          "parameters": {
            "sqlDBName": {
              "type": "string",
              "defaultValue": "SampleDB",
              "metadata": {
                "description": "The name of the SQL Database."
              }
            },
            "suffix": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location for all resources."
              }
            },
            "administratorLogin": {
              "type": "string",
              "metadata": {
                "description": "The administrator username of the SQL logical server."
              }
            },
            "administratorLoginPassword": {
              "type": "secureString",
              "metadata": {
                "description": "The administrator password of the SQL logical server."
              }
            }
          },
          "functions": [],
          "variables": {
            "serverName": "[format('sql-{0}', parameters('suffix'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Sql/servers",
              "apiVersion": "2020-02-02-preview",
              "name": "[variables('serverName')]",
              "location": "[parameters('location')]",
              "properties": {
                "administratorLogin": "[parameters('administratorLogin')]",
                "administratorLoginPassword": "[parameters('administratorLoginPassword')]"
              }
            },
            {
              "type": "Microsoft.Sql/servers/databases",
              "apiVersion": "2020-02-02-preview",
              "name": "[format('{0}/{1}', variables('serverName'), parameters('sqlDBName'))]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "Standard",
                "tier": "Standard"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', variables('serverName'))]"
              ]
            }
          ],
          "outputs": {
            "sqlServerName": {
              "type": "string",
              "value": "[variables('serverName')]"
            }
          }
        }
      },
      "dependsOn": [
        "module_vnet"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "module-sqldb-private-link",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "suffix": {
            "value": "[variables('suffix')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "resourceType": {
            "value": "Microsoft.Sql/servers"
          },
          "resourceName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'module-sqldb'), '2019-10-01').outputs.sqlServerName.value]"
          },
          "groupType": {
            "value": "[variables('sqlGroupType')]"
          },
          "subnet": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'module-vnet-1')).outputs.subnetRefs.value[1].id]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.451.19169",
              "templateHash": "5518315067656976060"
            }
          },
          "parameters": {
            "suffix": {
              "type": "string",
              "metadata": {
                "description": "naming suffix based on resource group name hash"
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "location to deploy private link endpoint web app"
              }
            },
            "resourceType": {
              "type": "string",
              "metadata": {
                "description": " private link resource type"
              }
            },
            "resourceName": {
              "type": "string",
              "metadata": {
                "description": "private link resource name"
              }
            },
            "groupType": {
              "type": "string",
              "metadata": {
                "description": "private link resource group id"
              }
            },
            "subnet": {
              "type": "string",
              "metadata": {
                "description": "resource id of private link subnet"
              }
            }
          },
          "functions": [],
          "variables": {
            "prefix": "[guid(parameters('resourceType'))]",
            "privateEndpointName": "[format('{0}-pep-{1}', variables('prefix'), parameters('suffix'))]",
            "privateEndpointConnectionName": "[format('{0}-pep-cxn-{1}', variables('prefix'), parameters('suffix'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2019-04-01",
              "name": "[variables('privateEndpointName')]",
              "location": "[parameters('location')]",
              "properties": {
                "privateLinkServiceConnections": [
                  {
                    "name": "[variables('privateEndpointConnectionName')]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId(parameters('resourceType'), format('{0}-{1}', parameters('resourceName'), parameters('suffix')))]",
                      "groupIds": [
                        "[parameters('groupType')]"
                      ]
                    }
                  }
                ],
                "subnet": {
                  "id": "[parameters('subnet')]"
                }
              }
            }
          ],
          "outputs": {
            "privateLinkNicResource": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/privateEndpoints', variables('privateEndpointName')), '2019-11-01').networkInterfaces[0].id]"
            },
            "privateEndpointName": {
              "type": "string",
              "value": "[variables('privateEndpointName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'module-sqldb')]",
        "module_vnet"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "module-sqldb-private-dns-spoke-link",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "privateDnsZoneName": {
            "value": "[variables('sqlPrivateDnsZoneName')]"
          },
          "virtualNetworkName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'module-vnet-1')).outputs.vnetName.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.451.19169",
              "templateHash": "13144189239711622589"
            }
          },
          "parameters": {
            "privateDnsZoneName": {
              "type": "string",
              "metadata": {
                "description": "private dns zone name"
              }
            },
            "virtualNetworkName": {
              "type": "string",
              "metadata": {
                "description": "virtual network name"
              }
            },
            "enableVmRegistration": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "controls whether the dns zone will automatically register DNS records for resources in the virtual network"
              }
            }
          },
          "functions": [],
          "resources": [
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2018-09-01",
              "name": "[parameters('privateDnsZoneName')]",
              "location": "global"
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2018-09-01",
              "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), format('{0}-{1}-link', reference(resourceId('Microsoft.Network/privateDnsZones', parameters('privateDnsZoneName')), '2018-09-01', 'full'), parameters('virtualNetworkName')))]",
              "location": "global",
              "properties": {
                "registrationEnabled": "[parameters('enableVmRegistration')]",
                "virtualNetwork": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', parameters('privateDnsZoneName'))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'module-sqldb-private-link')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "module-sqldb-private-dns-hub-link",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "privateDnsZoneName": {
            "value": "[variables('sqlPrivateDnsZoneName')]"
          },
          "virtualNetworkName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'module-vnet-0')).outputs.vnetName.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.451.19169",
              "templateHash": "13144189239711622589"
            }
          },
          "parameters": {
            "privateDnsZoneName": {
              "type": "string",
              "metadata": {
                "description": "private dns zone name"
              }
            },
            "virtualNetworkName": {
              "type": "string",
              "metadata": {
                "description": "virtual network name"
              }
            },
            "enableVmRegistration": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "controls whether the dns zone will automatically register DNS records for resources in the virtual network"
              }
            }
          },
          "functions": [],
          "resources": [
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2018-09-01",
              "name": "[parameters('privateDnsZoneName')]",
              "location": "global"
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2018-09-01",
              "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), format('{0}-{1}-link', reference(resourceId('Microsoft.Network/privateDnsZones', parameters('privateDnsZoneName')), '2018-09-01', 'full'), parameters('virtualNetworkName')))]",
              "location": "global",
              "properties": {
                "registrationEnabled": "[parameters('enableVmRegistration')]",
                "virtualNetwork": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', parameters('privateDnsZoneName'))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'module-sqldb-private-dns-spoke-link')]",
        "[resourceId('Microsoft.Resources/deployments', 'module-sqldb-private-link')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "module-sqldb-private-link-ipconfigs",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "privateDnsZoneName": {
            "value": "[variables('sqlPrivateDnsZoneName')]"
          },
          "privateLinkNicResource": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'module-sqldb-private-link'), '2019-10-01').outputs.privateLinkNicResource.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.451.19169",
              "templateHash": "6900574887993388619"
            }
          },
          "parameters": {
            "privateDnsZoneName": {
              "type": "string",
              "metadata": {
                "description": "private dns zone name"
              }
            },
            "privateLinkNicResource": {
              "type": "string",
              "metadata": {
                "description": "private endpoint Nic ipConfigurations array resource id"
              }
            }
          },
          "functions": [],
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2019-10-01",
              "name": "private-link-ipconfigs",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateDnsZoneName": {
                    "value": "[parameters('privateDnsZoneName')]"
                  },
                  "privateLinkNicIpConfigs": {
                    "value": "[reference(parameters('privateLinkNicResource'), '2019-11-01').ipConfigurations]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.451.19169",
                      "templateHash": "9077396536022439172"
                    }
                  },
                  "parameters": {
                    "privateDnsZoneName": {
                      "type": "string",
                      "metadata": {
                        "description": "private DNS zone name"
                      }
                    },
                    "privateLinkNicIpConfigs": {
                      "type": "array",
                      "metadata": {
                        "description": "private endpoint nic ip configuration array"
                      }
                    }
                  },
                  "functions": [],
                  "resources": [
                    {
                      "copy": {
                        "name": "nestedTemplate_private_link_ipconfigs_helper",
                        "count": "[length(parameters('privateLinkNicIpConfigs'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2019-10-01",
                      "name": "[format('nestedTemplate-private-link-ipconfigs-helper{0}', copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "privateDnsZoneName": {
                            "value": "[parameters('privateDnsZoneName')]"
                          },
                          "privateLinkNicIpConfig": {
                            "value": "[parameters('privateLinkNicIpConfigs')[copyIndex()]]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.451.19169",
                              "templateHash": "2893020457347863195"
                            }
                          },
                          "parameters": {
                            "privateDnsZoneName": {
                              "type": "string",
                              "metadata": {
                                "description": "private DNS zone name"
                              }
                            },
                            "privateLinkNicIpConfig": {
                              "type": "object",
                              "metadata": {
                                "description": "private endpoint Nic ipConfiguration array resource id"
                              }
                            }
                          },
                          "functions": [],
                          "resources": [
                            {
                              "copy": {
                                "name": "privateDnsZoneName_privateLinkNicIpConfig_properties_privateLinkConnectionProperties_fqdns_0",
                                "count": "[length(range(0, length(parameters('privateLinkNicIpConfig').properties.privateLinkConnectionProperties.fqdns)))]"
                              },
                              "type": "Microsoft.Network/privateDnsZones/A",
                              "apiVersion": "2018-09-01",
                              "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), split(parameters('privateLinkNicIpConfig').properties.privateLinkConnectionProperties.fqdns[range(0, length(parameters('privateLinkNicIpConfig').properties.privateLinkConnectionProperties.fqdns))[copyIndex()]], '.')[0])]",
                              "properties": {
                                "aRecords": "[concat(json(format('[{{\"ipv4Address\":\"{0}\"}}]', parameters('privateLinkNicIpConfig').properties.privateIPAddress)))]",
                                "ttl": 3600
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'module-sqldb-private-dns-hub-link')]",
        "[resourceId('Microsoft.Resources/deployments', 'module-sqldb-private-link')]"
      ]
    }
  ],
  "outputs": {
    "firewallPublicIpAddress": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'module-firewall'), '2019-10-01').outputs.firewallPublicIpAddress.value]"
    },
    "aksClusterPrivateDnsHostName": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'module-aks'), '2019-10-01').outputs.aksControlPlanePrivateFQDN.value]"
    }
  }
}