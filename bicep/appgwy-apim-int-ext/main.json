{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.4.63.48766",
      "templateHash": "6602198096320911820"
    }
  },
  "parameters": {
    "apiHostName": {
      "type": "string"
    },
    "portalHostName": {
      "type": "string"
    },
    "domainName": {
      "type": "string"
    },
    "virtualNetworks": {
      "type": "array"
    },
    "tags": {
      "type": "object"
    },
    "userObjectId": {
      "type": "string"
    },
    "location": {
      "type": "string"
    },
    "secrets": {
      "type": "array"
    },
    "externalDnsResourceGroupName": {
      "type": "string",
      "defaultValue": "external-dns-zones-rg"
    },
    "customData": {
      "type": "string"
    }
  },
  "functions": [],
  "variables": {
    "suffix": "[uniqueString(resourceGroup().id)]",
    "keyVaultName": "[format('kvlt-{0}', variables('suffix'))]",
    "separatedAddressprefix": "[split(parameters('virtualNetworks')[0].subnets[3].addressPrefix, '.')]",
    "azFirewallPrivateIpAddress": "[format('{0}.{1}.{2}.4', variables('separatedAddressprefix')[0], variables('separatedAddressprefix')[1], variables('separatedAddressprefix')[2])]"
  },
  "resources": [
    {
      "copy": {
        "name": "keyVaultSecrets",
        "count": "[length(parameters('secrets'))]"
      },
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2021-04-01-preview",
      "name": "[format('{0}/{1}', variables('keyVaultName'), parameters('secrets')[copyIndex()].CertName)]",
      "properties": {
        "contentType": "application/x-pkcs12",
        "value": "[parameters('secrets')[copyIndex()].CertValue]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'keyVaultDeployment')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "keyVaultDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('keyVaultName')]"
          },
          "keyVaultUserObjectId": {
            "value": "[parameters('userObjectId')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tenantId": {
            "value": "[subscription().tenantId]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.63.48766",
              "templateHash": "13373266273539913893"
            }
          },
          "parameters": {
            "keyVaultUserObjectId": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "tenantId": {
              "type": "string"
            },
            "location": {
              "type": "string"
            }
          },
          "functions": [],
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2021-04-01-preview",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": {
                "displayName": "[parameters('name')]"
              },
              "properties": {
                "enabledForDeployment": true,
                "enabledForTemplateDeployment": true,
                "enabledForDiskEncryption": true,
                "createMode": "default",
                "tenantId": "[parameters('tenantId')]",
                "accessPolicies": [
                  {
                    "tenantId": "[parameters('tenantId')]",
                    "objectId": "[parameters('keyVaultUserObjectId')]",
                    "permissions": {
                      "keys": [
                        "get",
                        "list",
                        "create",
                        "import"
                      ],
                      "secrets": [
                        "get",
                        "list",
                        "set"
                      ],
                      "certificates": [
                        "get",
                        "list",
                        "create",
                        "import",
                        "update"
                      ]
                    }
                  }
                ],
                "sku": {
                  "name": "standard",
                  "family": "A"
                }
              }
            }
          ],
          "outputs": {
            "keyVaultId": {
              "type": "string",
              "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('name'))]"
            },
            "keyVaultUri": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('name'))).vaultUri]"
            },
            "keyVaultName": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "keyVault": {
              "type": "object",
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('name')), '2021-04-01-preview', 'full')]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "nsgDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "appGatewayPublicIpAddress": {
            "value": "1.1.1.1"
          },
          "suffix": {
            "value": "[variables('suffix')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.63.48766",
              "templateHash": "2544413799695470535"
            }
          },
          "parameters": {
            "suffix": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "appGatewayPublicIpAddress": {
              "type": "string"
            }
          },
          "functions": [],
          "resources": [
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2021-02-01",
              "name": "[format('appGateway-subnet-nsg-{0}', parameters('suffix'))]",
              "location": "[parameters('location')]",
              "properties": {
                "securityRules": [
                  {
                    "name": "appgwy-v1",
                    "properties": {
                      "description": "This rule is needed for application gateway probes to work",
                      "protocol": "*",
                      "destinationAddressPrefix": "*",
                      "sourcePortRange": "*",
                      "destinationPortRange": "65503-65534",
                      "sourceAddressPrefix": "Internet",
                      "access": "Allow",
                      "priority": 1000,
                      "direction": "Inbound"
                    }
                  },
                  {
                    "name": "appgwy-v2",
                    "properties": {
                      "description": "This rule is needed for application gateway probes to work",
                      "protocol": "*",
                      "destinationAddressPrefix": "*",
                      "sourcePortRange": "*",
                      "destinationPortRange": "65200-65535",
                      "sourceAddressPrefix": "Internet",
                      "access": "Allow",
                      "priority": 1010,
                      "direction": "Inbound"
                    }
                  },
                  {
                    "name": "appgwy-inbound-internet",
                    "properties": {
                      "description": "This rule is needed for application gateway probes to work",
                      "protocol": "Tcp",
                      "destinationAddressPrefix": "VirtualNetwork",
                      "sourcePortRange": "*",
                      "destinationPortRange": "",
                      "destinationPortRanges": [
                        "443"
                      ],
                      "sourceAddressPrefix": "Internet",
                      "access": "Allow",
                      "priority": 1020,
                      "direction": "Inbound"
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2021-02-01",
              "name": "[format('apim-subnet-nsg-{0}', parameters('suffix'))]",
              "location": "[parameters('location')]",
              "properties": {
                "securityRules": [
                  {
                    "name": "allow-inbound-apim-mgmt",
                    "properties": {
                      "description": "allow-inbound-apim-mgmt",
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "3443",
                      "sourceAddressPrefix": "ApiManagement",
                      "destinationAddressPrefix": "VirtualNetwork",
                      "access": "Allow",
                      "priority": 1010,
                      "direction": "Inbound"
                    }
                  },
                  {
                    "name": "allow-inbound-app-gwy",
                    "properties": {
                      "description": "allow-inbound-app-gwy",
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "3443",
                      "sourceAddressPrefix": "[parameters('appGatewayPublicIpAddress')]",
                      "destinationAddressPrefix": "VirtualNetwork",
                      "access": "Allow",
                      "priority": 1020,
                      "direction": "Inbound"
                    }
                  },
                  {
                    "name": "allow-outbound-apim-sql",
                    "properties": {
                      "description": "allow-outbound-apim-sql",
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "1443",
                      "sourceAddressPrefix": "VirtualNetwork",
                      "destinationAddressPrefix": "Sql",
                      "access": "Allow",
                      "priority": 1000,
                      "direction": "Outbound"
                    }
                  },
                  {
                    "name": "allow-outbound-apim-storage",
                    "properties": {
                      "description": "allow-outbound-apim-storage",
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "",
                      "destinationPortRanges": [
                        "80",
                        "443"
                      ],
                      "sourceAddressPrefix": "VirtualNetwork",
                      "destinationAddressPrefix": "Storage",
                      "access": "Allow",
                      "priority": 1010,
                      "direction": "Outbound"
                    }
                  }
                ]
              }
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "hubVNetDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "suffix": {
            "value": "[variables('suffix')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "vNet": {
            "value": "[parameters('virtualNetworks')[0]]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.63.48766",
              "templateHash": "14353705005555765908"
            }
          },
          "parameters": {
            "vNet": {
              "type": "object"
            },
            "tags": {
              "type": "object"
            },
            "suffix": {
              "type": "string"
            },
            "location": {
              "type": "string"
            }
          },
          "functions": [],
          "variables": {
            "copy": [
              {
                "name": "subnets",
                "count": "[length(range(0, length(parameters('vNet').subnets)))]",
                "input": {
                  "name": "[parameters('vNet').subnets[range(0, length(parameters('vNet').subnets))[copyIndex('subnets')]].name]",
                  "properties": {
                    "addressPrefix": "[parameters('vNet').subnets[range(0, length(parameters('vNet').subnets))[copyIndex('subnets')]].addressPrefix]",
                    "routeTable": "[if(equals(parameters('vNet').subnets[range(0, length(parameters('vNet').subnets))[copyIndex('subnets')]].udrName, json('null')), json('null'), json(format('{{\"id\": \"{0}\"}}\"}}', resourceId('Microsoft.Network/routeTables', format('{0}-rt-{1}', parameters('vNet').subnets[range(0, length(parameters('vNet').subnets))[copyIndex('subnets')]].udrName, parameters('suffix'))))))]",
                    "networkSecurityGroup": "[if(equals(parameters('vNet').subnets[range(0, length(parameters('vNet').subnets))[copyIndex('subnets')]].nsgName, json('null')), json('null'), json(format('{{\"id\": \"{0}\"}}\"}}', resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-nsg-{1}', parameters('vNet').subnets[range(0, length(parameters('vNet').subnets))[copyIndex('subnets')]].nsgName, parameters('suffix'))))))]",
                    "delegations": "[if(equals(parameters('vNet').subnets[range(0, length(parameters('vNet').subnets))[copyIndex('subnets')]].delegations, json('null')), json('null'), json(format('[{{\"name\": \"serviceDelegation\", \"properties\": {{\"serviceName\": \"{0}\"}}}}]', parameters('vNet').subnets[range(0, length(parameters('vNet').subnets))[copyIndex('subnets')]].delegations)))]",
                    "privateEndpointNetworkPolicies": "[parameters('vNet').subnets[range(0, length(parameters('vNet').subnets))[copyIndex('subnets')]].privateEndpointNetworkPolicies]"
                  },
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets/', format('{0}-{1}', parameters('vNet').name, parameters('suffix')), parameters('vNet').subnets[range(0, length(parameters('vNet').subnets))[copyIndex('subnets')]].name)]"
                }
              }
            ]
          },
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2021-02-01",
              "name": "[format('{0}-{1}', parameters('vNet').name, parameters('suffix'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "addressSpace": {
                  "addressPrefixes": "[parameters('vNet').addressPrefixes]"
                },
                "subnets": "[variables('subnets')]"
              }
            }
          ],
          "outputs": {
            "subnetRefs": {
              "type": "array",
              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', format('{0}-{1}', parameters('vNet').name, parameters('suffix')))).subnets]"
            },
            "vnetRef": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks', format('{0}-{1}', parameters('vNet').name, parameters('suffix')))]"
            },
            "vnetName": {
              "type": "string",
              "value": "[format('{0}-{1}', parameters('vNet').name, parameters('suffix'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'udrDeployment')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "spokeVNetDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "suffix": {
            "value": "[variables('suffix')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "vNet": {
            "value": "[parameters('virtualNetworks')[1]]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.63.48766",
              "templateHash": "14353705005555765908"
            }
          },
          "parameters": {
            "vNet": {
              "type": "object"
            },
            "tags": {
              "type": "object"
            },
            "suffix": {
              "type": "string"
            },
            "location": {
              "type": "string"
            }
          },
          "functions": [],
          "variables": {
            "copy": [
              {
                "name": "subnets",
                "count": "[length(range(0, length(parameters('vNet').subnets)))]",
                "input": {
                  "name": "[parameters('vNet').subnets[range(0, length(parameters('vNet').subnets))[copyIndex('subnets')]].name]",
                  "properties": {
                    "addressPrefix": "[parameters('vNet').subnets[range(0, length(parameters('vNet').subnets))[copyIndex('subnets')]].addressPrefix]",
                    "routeTable": "[if(equals(parameters('vNet').subnets[range(0, length(parameters('vNet').subnets))[copyIndex('subnets')]].udrName, json('null')), json('null'), json(format('{{\"id\": \"{0}\"}}\"}}', resourceId('Microsoft.Network/routeTables', format('{0}-rt-{1}', parameters('vNet').subnets[range(0, length(parameters('vNet').subnets))[copyIndex('subnets')]].udrName, parameters('suffix'))))))]",
                    "networkSecurityGroup": "[if(equals(parameters('vNet').subnets[range(0, length(parameters('vNet').subnets))[copyIndex('subnets')]].nsgName, json('null')), json('null'), json(format('{{\"id\": \"{0}\"}}\"}}', resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-nsg-{1}', parameters('vNet').subnets[range(0, length(parameters('vNet').subnets))[copyIndex('subnets')]].nsgName, parameters('suffix'))))))]",
                    "delegations": "[if(equals(parameters('vNet').subnets[range(0, length(parameters('vNet').subnets))[copyIndex('subnets')]].delegations, json('null')), json('null'), json(format('[{{\"name\": \"serviceDelegation\", \"properties\": {{\"serviceName\": \"{0}\"}}}}]', parameters('vNet').subnets[range(0, length(parameters('vNet').subnets))[copyIndex('subnets')]].delegations)))]",
                    "privateEndpointNetworkPolicies": "[parameters('vNet').subnets[range(0, length(parameters('vNet').subnets))[copyIndex('subnets')]].privateEndpointNetworkPolicies]"
                  },
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets/', format('{0}-{1}', parameters('vNet').name, parameters('suffix')), parameters('vNet').subnets[range(0, length(parameters('vNet').subnets))[copyIndex('subnets')]].name)]"
                }
              }
            ]
          },
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2021-02-01",
              "name": "[format('{0}-{1}', parameters('vNet').name, parameters('suffix'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "addressSpace": {
                  "addressPrefixes": "[parameters('vNet').addressPrefixes]"
                },
                "subnets": "[variables('subnets')]"
              }
            }
          ],
          "outputs": {
            "subnetRefs": {
              "type": "array",
              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', format('{0}-{1}', parameters('vNet').name, parameters('suffix')))).subnets]"
            },
            "vnetRef": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks', format('{0}-{1}', parameters('vNet').name, parameters('suffix')))]"
            },
            "vnetName": {
              "type": "string",
              "value": "[format('{0}-{1}', parameters('vNet').name, parameters('suffix'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'udrDeployment')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "vNetPeeringDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "suffix": {
            "value": "[variables('suffix')]"
          },
          "vNets": {
            "value": "[parameters('virtualNetworks')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.63.48766",
              "templateHash": "12271678071976070815"
            }
          },
          "parameters": {
            "vNets": {
              "type": "array"
            },
            "suffix": {
              "type": "string"
            }
          },
          "functions": [],
          "resources": [
            {
              "copy": {
                "name": "hubVnet",
                "count": "[length(range(0, sub(length(parameters('vNets')), 1)))]"
              },
              "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
              "apiVersion": "2021-02-01",
              "name": "[format('{0}-{1}/peering-to-{2}-{3}', parameters('vNets')[0].name, parameters('suffix'), parameters('vNets')[add(range(0, sub(length(parameters('vNets')), 1))[copyIndex()], 1)].name, parameters('suffix'))]",
              "properties": {
                "allowVirtualNetworkAccess": true,
                "allowForwardedTraffic": true,
                "allowGatewayTransit": false,
                "useRemoteGateways": false,
                "remoteVirtualNetwork": {
                  "id": "[resourceId(resourceGroup().name, 'Microsoft.Network/virtualNetworks', format('{0}-{1}', parameters('vNets')[add(range(0, sub(length(parameters('vNets')), 1))[copyIndex()], 1)].name, parameters('suffix')))]"
                }
              }
            },
            {
              "copy": {
                "name": "spokeVnet",
                "count": "[length(range(0, sub(length(parameters('vNets')), 1)))]"
              },
              "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
              "apiVersion": "2021-02-01",
              "name": "[format('{0}-{1}/peering-to-{2}-{3}', parameters('vNets')[add(range(0, sub(length(parameters('vNets')), 1))[copyIndex()], 1)].name, parameters('suffix'), parameters('vNets')[0].name, parameters('suffix'))]",
              "properties": {
                "allowVirtualNetworkAccess": true,
                "allowForwardedTraffic": true,
                "allowGatewayTransit": false,
                "useRemoteGateways": false,
                "remoteVirtualNetwork": {
                  "id": "[resourceId(resourceGroup().name, 'Microsoft.Network/virtualNetworks', format('{0}-{1}', parameters('vNets')[0].name, parameters('suffix')))]"
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'hubVNetDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'spokeVNetDeployment')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "udrDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "suffix": {
            "value": "[variables('suffix')]"
          },
          "azureFirewallPrivateIpAddress": {
            "value": "[variables('azFirewallPrivateIpAddress')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.63.48766",
              "templateHash": "10336010884592496670"
            }
          },
          "parameters": {
            "suffix": {
              "type": "string"
            },
            "azureFirewallPrivateIpAddress": {
              "type": "string"
            }
          },
          "functions": [],
          "resources": [
            {
              "type": "Microsoft.Network/routeTables",
              "apiVersion": "2021-02-01",
              "name": "[format('hub-to-spoke-rt-{0}', parameters('suffix'))]",
              "location": "[resourceGroup().location]",
              "properties": {
                "disableBgpRoutePropagation": false,
                "routes": [
                  {
                    "name": "hub-to-spoke-route",
                    "properties": {
                      "addressPrefix": "10.2.0.0/16",
                      "nextHopType": "VirtualAppliance",
                      "nextHopIpAddress": "[parameters('azureFirewallPrivateIpAddress')]"
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Network/routeTables",
              "apiVersion": "2021-02-01",
              "name": "[format('spoke-to-hub-rt-{0}', parameters('suffix'))]",
              "location": "[resourceGroup().location]",
              "properties": {
                "disableBgpRoutePropagation": false,
                "routes": [
                  {
                    "name": "spoke-to-hub-route",
                    "properties": {
                      "addressPrefix": "10.1.0.0/16",
                      "nextHopType": "VirtualAppliance",
                      "nextHopIpAddress": "[parameters('azureFirewallPrivateIpAddress')]"
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Network/routeTables",
              "apiVersion": "2021-02-01",
              "name": "[format('default-firewall-rt-{0}', parameters('suffix'))]",
              "location": "[resourceGroup().location]",
              "properties": {
                "disableBgpRoutePropagation": false,
                "routes": [
                  {
                    "name": "default-fw-route",
                    "properties": {
                      "addressPrefix": "0.0.0.0/0",
                      "nextHopType": "VirtualAppliance",
                      "nextHopIpAddress": "[parameters('azureFirewallPrivateIpAddress')]"
                    }
                  }
                ]
              }
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "azureFirewallDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "suffix": {
            "value": "[variables('suffix')]"
          },
          "firewallSubnetRef": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'hubVNetDeployment'), '2019-10-01').outputs.subnetRefs.value[3].id]"
          },
          "sourceAddressRangePrefix": {
            "value": [
              "10.0.0.0/8",
              "192.168.88.0/24"
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.63.48766",
              "templateHash": "189592040350119804"
            }
          },
          "parameters": {
            "firewallSubnetRef": {
              "type": "string"
            },
            "sourceAddressRangePrefix": {
              "type": "array"
            },
            "suffix": {
              "type": "string"
            }
          },
          "functions": [],
          "variables": {
            "publicIpName": "[format('azfw-pip-{0}', parameters('suffix'))]",
            "firewallName": "[format('azfw-{0}', parameters('suffix'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Network/publicIPAddresses",
              "apiVersion": "2017-11-01",
              "name": "[variables('publicIpName')]",
              "location": "[resourceGroup().location]",
              "sku": {
                "name": "Standard"
              },
              "properties": {
                "publicIPAllocationMethod": "Static",
                "publicIPAddressVersion": "IPv4"
              }
            },
            {
              "type": "Microsoft.Network/azureFirewalls",
              "apiVersion": "2018-11-01",
              "name": "[variables('firewallName')]",
              "location": "[resourceGroup().location]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig",
                    "properties": {
                      "subnet": {
                        "id": "[parameters('firewallSubnetRef')]"
                      },
                      "publicIPAddress": {
                        "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpName'))]"
                      }
                    }
                  }
                ],
                "applicationRuleCollections": [
                  {
                    "name": "aks",
                    "properties": {
                      "priority": 100,
                      "action": {
                        "type": "Allow"
                      },
                      "rules": [
                        {
                          "name": "allow-aks",
                          "sourceAddresses": "[parameters('sourceAddressRangePrefix')]",
                          "protocols": [
                            {
                              "protocolType": "Http",
                              "port": 80
                            },
                            {
                              "protocolType": "Https",
                              "port": 443
                            }
                          ],
                          "targetFqdns": [
                            "*.azmk8s.io",
                            "*auth.docker.io",
                            "*cloudflare.docker.io",
                            "*cloudflare.docker.com",
                            "*registry-1.docker.io"
                          ]
                        }
                      ]
                    }
                  },
                  {
                    "name": "oss",
                    "properties": {
                      "priority": 200,
                      "action": {
                        "type": "Allow"
                      },
                      "rules": [
                        {
                          "name": "allow-oss",
                          "sourceAddresses": "[parameters('sourceAddressRangePrefix')]",
                          "protocols": [
                            {
                              "protocolType": "Http",
                              "port": 80
                            },
                            {
                              "protocolType": "Https",
                              "port": 443
                            }
                          ],
                          "targetFqdns": [
                            "download.opensuse.org",
                            "login.microsoftonline.com",
                            "*.ubuntu.com",
                            "dc.services.visualstudio.com",
                            "*.opinsights.azure.com",
                            "github.com",
                            "*.github.com",
                            "raw.githubusercontent.com",
                            "*.ubuntu.com",
                            "api.snapcraft.io",
                            "download.opensuse.org"
                          ]
                        }
                      ]
                    }
                  },
                  {
                    "name": "azure",
                    "properties": {
                      "priority": 300,
                      "action": {
                        "type": "Allow"
                      },
                      "rules": [
                        {
                          "name": "allow-sites",
                          "sourceAddresses": "[parameters('sourceAddressRangePrefix')]",
                          "protocols": [
                            {
                              "protocolType": "Http",
                              "port": 80
                            },
                            {
                              "protocolType": "Https",
                              "port": 443
                            }
                          ],
                          "targetFqdns": [
                            "*azurecr.io",
                            "*blob.core.windows.net",
                            "*.trafficmanager.net",
                            "*.azureedge.net",
                            "*.microsoft.com",
                            "*.core.windows.net",
                            "aka.ms",
                            "*.azure-automation.net",
                            "*.azure.com"
                          ]
                        }
                      ]
                    }
                  }
                ],
                "networkRuleCollections": [
                  {
                    "name": "netRulesCollection",
                    "properties": {
                      "priority": 100,
                      "action": {
                        "type": "Allow"
                      },
                      "rules": [
                        {
                          "name": "allow-ssh-https",
                          "sourceAddresses": "[parameters('sourceAddressRangePrefix')]",
                          "destinationAddresses": "[union(parameters('sourceAddressRangePrefix'), array('*'))]",
                          "destinationPorts": [
                            "22",
                            "443"
                          ],
                          "protocols": [
                            "TCP"
                          ]
                        }
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpName'))]"
              ]
            }
          ],
          "outputs": {
            "firewallPrivateIp": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/azureFirewalls', variables('firewallName'))).ipConfigurations[0].properties.privateIPAddress]"
            },
            "firewallPublicIp": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpName'))).ipAddress]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'hubVNetDeployment')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "bastionDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "subnetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'hubVNetDeployment'), '2019-10-01').outputs.subnetRefs.value[4].id]"
          },
          "suffix": {
            "value": "[variables('suffix')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.63.48766",
              "templateHash": "13570182533029272916"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "suffix": {
              "type": "string"
            },
            "subnetId": {
              "type": "string"
            }
          },
          "functions": [],
          "variables": {
            "bastionName": "[format('bst-{0}', parameters('suffix'))]",
            "bastionPublicIpName": "[format('bst-pip-{0}', parameters('suffix'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Network/publicIPAddresses",
              "apiVersion": "2021-02-01",
              "name": "[variables('bastionPublicIpName')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "Standard",
                "tier": "Regional"
              },
              "properties": {
                "publicIPAddressVersion": "IPv4",
                "publicIPAllocationMethod": "Static"
              }
            },
            {
              "type": "Microsoft.Network/bastionHosts",
              "apiVersion": "2021-02-01",
              "name": "[variables('bastionName')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "Standard"
              },
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig1",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "publicIPAddress": {
                        "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('bastionPublicIpName'))]"
                      },
                      "subnet": {
                        "id": "[parameters('subnetId')]"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', variables('bastionPublicIpName'))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'azureFirewallDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'hubVNetDeployment')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "vmDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "customData": {
            "value": "[parameters('customData')]"
          },
          "adminPassword": {
            "value": "M1cr0soft1234567890"
          },
          "adminUserName": {
            "value": "localadmin"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "subnetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'hubVNetDeployment'), '2019-10-01').outputs.subnetRefs.value[2].id]"
          },
          "suffix": {
            "value": "[variables('suffix')]"
          },
          "vmSize": {
            "value": "Standard_D2_v3"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.63.48766",
              "templateHash": "14519504229832305676"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "subnetId": {
              "type": "string"
            },
            "suffix": {
              "type": "string"
            },
            "vmSize": {
              "type": "string",
              "defaultValue": "Standard_D2_v3"
            },
            "adminPassword": {
              "type": "string"
            },
            "adminUserName": {
              "type": "string"
            },
            "imageRef": {
              "type": "object",
              "defaultValue": {
                "offer": "0001-com-ubuntu-server-focal",
                "publisher": "Canonical",
                "sku": "20_04-lts",
                "version": "latest"
              }
            },
            "customData": {
              "type": "string"
            }
          },
          "functions": [],
          "variables": {
            "base64CustomData": "[base64(parameters('customData'))]",
            "vmName": "[format('linux-vm-{0}', parameters('suffix'))]",
            "nicName": "[format('linux-vm-nic-1-{0}', parameters('suffix'))]",
            "computerName": "[format('linux-vm-{0}', substring(parameters('suffix'), 0, 6))]"
          },
          "resources": [
            {
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2021-02-01",
              "name": "[variables('nicName')]",
              "location": "[parameters('location')]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig1",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "subnet": {
                        "id": "[parameters('subnetId')]"
                      }
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2021-03-01",
              "name": "[variables('vmName')]",
              "location": "[parameters('location')]",
              "properties": {
                "storageProfile": {
                  "imageReference": "[parameters('imageRef')]",
                  "osDisk": {
                    "createOption": "FromImage"
                  }
                },
                "hardwareProfile": {
                  "vmSize": "[parameters('vmSize')]"
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]"
                    }
                  ]
                },
                "osProfile": {
                  "customData": "[variables('base64CustomData')]",
                  "adminPassword": "[parameters('adminPassword')]",
                  "adminUsername": "[parameters('adminUserName')]",
                  "computerName": "[variables('computerName')]",
                  "linuxConfiguration": {
                    "disablePasswordAuthentication": false,
                    "patchSettings": {
                      "patchMode": "AutomaticByPlatform"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'bastionDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'hubVNetDeployment')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "funcAppModule",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "appSvcPrivateDNSZoneName": {
            "value": "azurewebsites.net"
          },
          "hubVnetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'hubVNetDeployment'), '2019-10-01').outputs.vnetRef.value]"
          },
          "spokeVnetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'spokeVNetDeployment'), '2019-10-01').outputs.vnetRef.value]"
          },
          "vnetIntegrationSubnetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'spokeVNetDeployment'), '2019-10-01').outputs.subnetRefs.value[4].id]"
          },
          "privateEndpointSubnetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'spokeVNetDeployment'), '2019-10-01').outputs.subnetRefs.value[3].id]"
          },
          "planSku": {
            "value": "ElasticPremium"
          },
          "planSkuCode": {
            "value": "EP1"
          },
          "planKind": {
            "value": "elastic"
          },
          "suffix": {
            "value": "[variables('suffix')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.63.48766",
              "templateHash": "3962311201839827713"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "vnetIntegrationSubnetId": {
              "type": "string"
            },
            "privateEndpointSubnetId": {
              "type": "string"
            },
            "appSvcPrivateDNSZoneName": {
              "type": "string",
              "defaultValue": "azurewebsites.net"
            },
            "hubVnetId": {
              "type": "string"
            },
            "spokeVnetId": {
              "type": "string"
            },
            "suffix": {
              "type": "string"
            },
            "use32BitWorkerProcess": {
              "type": "bool",
              "defaultValue": false
            },
            "linuxFxVersion": {
              "type": "string",
              "defaultValue": ""
            },
            "tags": {
              "type": "object"
            },
            "planSkuCode": {
              "type": "string",
              "defaultValue": "EP1"
            },
            "planSku": {
              "type": "string",
              "defaultValue": "ElasticPremium"
            },
            "planKind": {
              "type": "string",
              "defaultValue": "elastic"
            }
          },
          "functions": [],
          "variables": {
            "hostingPlanName": "[format('ep-{0}', parameters('suffix'))]",
            "funcAppName": "[format('func-app-{0}', parameters('suffix'))]",
            "appInsightsName": "[format('app-insights-{0}', parameters('suffix'))]",
            "funcStorageAccountName": "[format('funcstor{0}', parameters('suffix'))]",
            "fileShareName": "myfunctionfiles",
            "privateEndpointWebJobsQueueStorageName": "[format('webjobs-queue-private-endpoint-{0}', parameters('suffix'))]",
            "privateEndpointWebJobsTableStorageName": "[format('webjobs-table-private-endpoint-{0}', parameters('suffix'))]",
            "privateEndpointWebJobsBlobStorageName": "[format('webjobs-blob-private-endpoint-{0}', parameters('suffix'))]",
            "privateEndpointWebJobsFileStorageName": "[format('webjobs-file-private-endpoint-{0}', parameters('suffix'))]",
            "privateStorageQueueDnsZoneName": "privatelink.queue.core.windows.net",
            "privateStorageBlobDnsZoneName": "privatelink.blob.core.windows.net",
            "privateStorageTableDnsZoneName": "privatelink.table.core.windows.net",
            "privateStorageFileDnsZoneName": "privatelink.file.core.windows.net"
          },
          "resources": [
            {
              "type": "Microsoft.Web/serverfarms",
              "apiVersion": "2020-06-01",
              "name": "[variables('hostingPlanName')]",
              "location": "[parameters('location')]",
              "kind": "[parameters('planKind')]",
              "sku": {
                "name": "[parameters('planSkuCode')]",
                "tier": "[parameters('planSku')]"
              },
              "properties": {
                "reserved": true,
                "maximumElasticWorkerCount": 20
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('funcStorageAccountName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2021-01-01",
              "name": "[variables('funcAppName')]",
              "kind": "functionapp,linux",
              "location": "[parameters('location')]",
              "tags": {},
              "properties": {
                "siteConfig": {
                  "appSettings": [
                    {
                      "name": "FUNCTIONS_EXTENSION_VERSION",
                      "value": "~3"
                    },
                    {
                      "name": "FUNCTIONS_WORKER_RUNTIME",
                      "value": "custom"
                    },
                    {
                      "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                      "value": "[reference(format('microsoft.insights/components/{0}', variables('appInsightsName')), '2015-05-01').InstrumentationKey]"
                    },
                    {
                      "name": "AzureWebJobsStorage",
                      "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};', variables('funcStorageAccountName'), listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('funcStorageAccountName')), '2019-06-01').keys[0].value)]"
                    },
                    {
                      "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
                      "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};', variables('funcStorageAccountName'), listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('funcStorageAccountName')), '2019-06-01').keys[0].value)]"
                    },
                    {
                      "name": "WEBSITE_DNS_SERVER",
                      "value": "168.63.129.16"
                    },
                    {
                      "name": "WEBSITE_CONTENTOVERVNET",
                      "value": "1"
                    },
                    {
                      "name": "WEBSITE_CONTENTSHARE",
                      "value": "[variables('fileShareName')]"
                    },
                    {
                      "name": "WEBSITE_VNET_ROUTE_ALL",
                      "value": "1"
                    }
                  ],
                  "use32BitWorkerProcess": "[parameters('use32BitWorkerProcess')]",
                  "linuxFxVersion": "[parameters('linuxFxVersion')]"
                },
                "serverFarmId": "[format('/subscriptions/{0}/resourcegroups/{1}/providers/Microsoft.Web/serverfarms/{2}', subscription().subscriptionId, resourceGroup().name, variables('hostingPlanName'))]",
                "clientAffinityEnabled": false
              },
              "dependsOn": [
                "[resourceId('Microsoft.Insights/components', variables('appInsightsName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('funcStorageAccountName'))]",
                "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/components",
              "apiVersion": "2020-02-02-preview",
              "name": "[variables('appInsightsName')]",
              "kind": "web",
              "location": "[parameters('location')]",
              "tags": {},
              "properties": {
                "Application_Type": "web"
              }
            },
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[variables('privateStorageQueueDnsZoneName')]",
              "location": "global"
            },
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[variables('privateStorageTableDnsZoneName')]",
              "location": "global"
            },
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[variables('privateStorageFileDnsZoneName')]",
              "location": "global"
            },
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[variables('privateStorageBlobDnsZoneName')]",
              "location": "global"
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', variables('privateStorageQueueDnsZoneName'), format('{0}-link', variables('privateStorageQueueDnsZoneName')))]",
              "location": "global",
              "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                  "id": "[parameters('spokeVnetId')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', variables('privateStorageQueueDnsZoneName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', variables('privateStorageBlobDnsZoneName'), format('{0}-link', variables('privateStorageBlobDnsZoneName')))]",
              "location": "global",
              "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                  "id": "[parameters('spokeVnetId')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', variables('privateStorageBlobDnsZoneName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', variables('privateStorageFileDnsZoneName'), format('{0}-link', variables('privateStorageFileDnsZoneName')))]",
              "location": "global",
              "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                  "id": "[parameters('spokeVnetId')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', variables('privateStorageFileDnsZoneName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', variables('privateStorageTableDnsZoneName'), format('{0}-link', variables('privateStorageTableDnsZoneName')))]",
              "location": "global",
              "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                  "id": "[parameters('spokeVnetId')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', variables('privateStorageTableDnsZoneName'))]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2019-06-01",
              "name": "[variables('funcStorageAccountName')]",
              "kind": "StorageV2",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "Standard_LRS"
              },
              "properties": {
                "supportsHttpsTrafficOnly": true,
                "networkAcls": {
                  "bypass": "AzureServices",
                  "virtualNetworkRules": [],
                  "ipRules": [],
                  "defaultAction": "Deny"
                },
                "encryption": {
                  "services": {
                    "blob": {
                      "keyType": "Account",
                      "enabled": true
                    },
                    "file": {
                      "keyType": "Account",
                      "enabled": true
                    }
                  },
                  "keySource": "Microsoft.Storage"
                }
              }
            },
            {
              "type": "Microsoft.Storage/storageAccounts/fileServices",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', variables('funcStorageAccountName'), 'default')]",
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('funcStorageAccountName'))]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}/{2}', variables('funcStorageAccountName'), 'default', variables('fileShareName'))]",
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/fileServices', variables('funcStorageAccountName'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('funcStorageAccountName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2021-02-01",
              "name": "[variables('privateEndpointWebJobsQueueStorageName')]",
              "location": "[parameters('location')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('privateEndpointSubnetId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-cxn', variables('privateEndpointWebJobsQueueStorageName'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', variables('funcStorageAccountName'))]",
                      "groupIds": [
                        "queue"
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('funcStorageAccountName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2021-02-01",
              "name": "[format('{0}/{1}', variables('privateEndpointWebJobsQueueStorageName'), 'queueStoragePrivateENdpointDnsZoneGroup')]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "config1",
                    "properties": {
                      "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('privateStorageQueueDnsZoneName'))]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', variables('privateEndpointWebJobsQueueStorageName'))]",
                "[resourceId('Microsoft.Network/privateDnsZones', variables('privateStorageQueueDnsZoneName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2021-02-01",
              "name": "[variables('privateEndpointWebJobsTableStorageName')]",
              "location": "[parameters('location')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('privateEndpointSubnetId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-cxn', variables('privateEndpointWebJobsTableStorageName'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', variables('funcStorageAccountName'))]",
                      "groupIds": [
                        "table"
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('funcStorageAccountName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2021-02-01",
              "name": "[format('{0}/{1}', variables('privateEndpointWebJobsTableStorageName'), 'tableStoragePrivateENdpointDnsZoneGroup')]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "config1",
                    "properties": {
                      "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('privateStorageTableDnsZoneName'))]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', variables('privateEndpointWebJobsTableStorageName'))]",
                "[resourceId('Microsoft.Network/privateDnsZones', variables('privateStorageTableDnsZoneName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2021-02-01",
              "name": "[variables('privateEndpointWebJobsBlobStorageName')]",
              "location": "[parameters('location')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('privateEndpointSubnetId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-cxn', variables('privateEndpointWebJobsBlobStorageName'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', variables('funcStorageAccountName'))]",
                      "groupIds": [
                        "blob"
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('funcStorageAccountName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2021-02-01",
              "name": "[format('{0}/{1}', variables('privateEndpointWebJobsBlobStorageName'), 'blobStoragePrivateENdpointDnsZoneGroup')]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "config1",
                    "properties": {
                      "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('privateStorageBlobDnsZoneName'))]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', variables('privateEndpointWebJobsBlobStorageName'))]",
                "[resourceId('Microsoft.Network/privateDnsZones', variables('privateStorageBlobDnsZoneName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2021-02-01",
              "name": "[variables('privateEndpointWebJobsFileStorageName')]",
              "location": "[parameters('location')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('privateEndpointSubnetId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-cxn', variables('privateEndpointWebJobsFileStorageName'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', variables('funcStorageAccountName'))]",
                      "groupIds": [
                        "file"
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('funcStorageAccountName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2021-02-01",
              "name": "[format('{0}/{1}', variables('privateEndpointWebJobsFileStorageName'), 'fileStoragePrivateENdpointDnsZoneGroup')]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "config1",
                    "properties": {
                      "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('privateStorageFileDnsZoneName'))]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', variables('privateEndpointWebJobsFileStorageName'))]",
                "[resourceId('Microsoft.Network/privateDnsZones', variables('privateStorageFileDnsZoneName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/sites/networkConfig",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/VirtualNetwork', variables('funcAppName'))]",
              "properties": {
                "subnetResourceId": "[parameters('vnetIntegrationSubnetId')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', variables('funcAppName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2020-11-01",
              "name": "appSvcPrivateEndpoint",
              "location": "[resourceGroup().location]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('privateEndpointSubnetId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "funcAppConnection",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.Web/sites', variables('funcAppName'))]",
                      "groupIds": [
                        "sites"
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', variables('funcAppName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[parameters('appSvcPrivateDNSZoneName')]",
              "location": "global",
              "tags": "[parameters('tags')]",
              "properties": {}
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}-hub-func-link', parameters('appSvcPrivateDNSZoneName'), parameters('appSvcPrivateDNSZoneName'))]",
              "tags": "[parameters('tags')]",
              "location": "global",
              "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                  "id": "[parameters('hubVnetId')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', parameters('appSvcPrivateDNSZoneName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}-spoke-func-link', parameters('appSvcPrivateDNSZoneName'), parameters('appSvcPrivateDNSZoneName'))]",
              "tags": "[parameters('tags')]",
              "location": "global",
              "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                  "id": "[parameters('spokeVnetId')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', parameters('appSvcPrivateDNSZoneName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-11-01",
              "name": "[format('{0}/funcDnsGroup', 'appSvcPrivateEndpoint')]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "config1",
                    "properties": {
                      "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', parameters('appSvcPrivateDNSZoneName'))]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', 'appSvcPrivateEndpoint')]",
                "[resourceId('Microsoft.Network/privateDnsZones', parameters('appSvcPrivateDNSZoneName'))]"
              ]
            }
          ],
          "outputs": {
            "funcAppUrl": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Web/sites', variables('funcAppName'))).defaultHostName]"
            },
            "funcAppName": {
              "type": "string",
              "value": "[variables('funcAppName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'hubVNetDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'spokeVNetDeployment')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "apimDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "tags": {
            "value": "[parameters('tags')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "apimPrivateDnsZoneName": {
            "value": "[parameters('domainName')]"
          },
          "hubVnetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'hubVNetDeployment'), '2019-10-01').outputs.vnetRef.value]"
          },
          "spokeVnetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'spokeVNetDeployment'), '2019-10-01').outputs.vnetRef.value]"
          },
          "webAppUrl": {
            "value": "[format('https://{0}', reference(resourceId('Microsoft.Resources/deployments', 'funcAppModule'), '2019-10-01').outputs.funcAppUrl.value)]"
          },
          "apimSku": {
            "value": {
              "name": "Developer",
              "capacity": 1
            }
          },
          "deployCertificates": {
            "value": false
          },
          "gatewayHostName": {
            "value": "[format('{0}.{1}', parameters('apiHostName'), parameters('domainName'))]"
          },
          "portalHostName": {
            "value": "[format('{0}.{1}', parameters('portalHostName'), parameters('domainName'))]"
          },
          "subnetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'hubVNetDeployment'), '2019-10-01').outputs.subnetRefs.value[1].id]"
          },
          "keyVaultName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'keyVaultDeployment'), '2019-10-01').outputs.keyVaultName.value]"
          },
          "keyVaultUri": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'keyVaultDeployment'), '2019-10-01').outputs.keyVaultUri.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.63.48766",
              "templateHash": "4231234499862856084"
            }
          },
          "parameters": {
            "apimSku": {
              "type": "object",
              "defaultValue": {
                "name": "Developer",
                "capacity": 1
              }
            },
            "portalHostName": {
              "type": "string",
              "defaultValue": "portal.kainiindustries.net"
            },
            "gatewayHostName": {
              "type": "string",
              "defaultValue": "api.kainiindustries.net"
            },
            "subnetId": {
              "type": "string"
            },
            "keyVaultUri": {
              "type": "string"
            },
            "keyVaultName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "deployCertificates": {
              "type": "bool",
              "defaultValue": false
            },
            "tags": {
              "type": "object"
            },
            "apimPrivateDnsZoneName": {
              "type": "string"
            },
            "hubVnetId": {
              "type": "string"
            },
            "spokeVnetId": {
              "type": "string"
            },
            "webAppUrl": {
              "type": "string"
            }
          },
          "functions": [],
          "variables": {
            "suffix": "[uniqueString(resourceGroup().id)]",
            "apimName": "[format('api-mgmt-{0}', variables('suffix'))]",
            "apimServiceIdentityResourceId": "[format('{0}/providers/Microsoft.ManagedIdentity/Identities/default', resourceId('Microsoft.ApiManagement/service', variables('apimName')))]",
            "hostNameConfigurations": [
              {
                "type": "Portal",
                "keyVaultId": "[format('{0}secrets/portal', parameters('keyVaultUri'))]",
                "defaultSslBinding": false,
                "hostName": "[parameters('portalHostName')]",
                "negotiateClientCertificate": false
              },
              {
                "type": "Proxy",
                "keyVaultId": "[format('{0}secrets/api', parameters('keyVaultUri'))]",
                "defaultSslBinding": false,
                "hostName": "[parameters('gatewayHostName')]",
                "negotiateClientCertificate": true
              }
            ]
          },
          "resources": [
            {
              "type": "Microsoft.ApiManagement/service",
              "apiVersion": "2018-06-01-preview",
              "name": "[variables('apimName')]",
              "location": "[parameters('location')]",
              "sku": "[parameters('apimSku')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "publisherEmail": "cbellee@microsoft.com",
                "publisherName": "KainiIndustries",
                "notificationSenderEmail": "apim-noreply@mail.windowsazure.com",
                "hostnameConfigurations": "[if(parameters('deployCertificates'), variables('hostNameConfigurations'), json('null'))]",
                "virtualNetworkConfiguration": {
                  "subnetResourceId": "[parameters('subnetId')]"
                },
                "customProperties": {
                  "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10": "False",
                  "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11": "False",
                  "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Ssl30": "False",
                  "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168": "False",
                  "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls10": "False",
                  "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls11": "False",
                  "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Ssl30": "False",
                  "Microsoft.WindowsAzure.ApiManagement.Gateway.Protocols.Server.Http2": "False"
                },
                "virtualNetworkType": "Internal"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/accessPolicies",
              "apiVersion": "2021-04-01-preview",
              "name": "[format('{0}/add', parameters('keyVaultName'))]",
              "properties": {
                "accessPolicies": [
                  {
                    "tenantId": "[subscription().tenantId]",
                    "objectId": "[reference(variables('apimServiceIdentityResourceId'), '2015-08-31-PREVIEW', 'Full').properties.principalId]",
                    "permissions": {
                      "secrets": [
                        "get"
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', variables('apimName'))]"
              ]
            },
            {
              "type": "Microsoft.ApiManagement/service/products",
              "apiVersion": "2021-01-01-preview",
              "name": "[format('{0}/myProduct', variables('apimName'))]",
              "properties": {
                "displayName": "My Product",
                "description": "My Product",
                "terms": "Terms for example product",
                "subscriptionRequired": false,
                "state": "published"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', variables('apimName'))]"
              ]
            },
            {
              "type": "Microsoft.ApiManagement/service/apis",
              "apiVersion": "2021-01-01-preview",
              "name": "[format('{0}/{1}', variables('apimName'), 'external-report-api')]",
              "properties": {
                "displayName": "External Report API",
                "subscriptionRequired": false,
                "apiRevision": "1",
                "serviceUrl": "[format('{0}/api/v1/report', parameters('webAppUrl'))]",
                "path": "external/report",
                "protocols": [
                  "https"
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', variables('apimName'))]"
              ]
            },
            {
              "type": "Microsoft.ApiManagement/service/apis",
              "apiVersion": "2021-01-01-preview",
              "name": "[format('{0}/{1}', variables('apimName'), 'internal-train-api')]",
              "properties": {
                "displayName": "Internal Train API",
                "subscriptionRequired": false,
                "apiRevision": "1",
                "serviceUrl": "[format('{0}/api/v1/train', parameters('webAppUrl'))]",
                "path": "internal/train",
                "protocols": [
                  "https"
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', variables('apimName'))]"
              ]
            },
            {
              "type": "Microsoft.ApiManagement/service/apis/operations",
              "apiVersion": "2021-01-01-preview",
              "name": "[format('{0}/{1}/{2}', variables('apimName'), 'external-report-api', 'external-test-call')]",
              "properties": {
                "displayName": "External Report API test call",
                "method": "GET",
                "urlTemplate": "/",
                "templateParameters": [],
                "request": {
                  "headers": [],
                  "representations": []
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', variables('apimName'))]",
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimName'), 'external-report-api')]"
              ]
            },
            {
              "type": "Microsoft.ApiManagement/service/apis/operations",
              "apiVersion": "2021-01-01-preview",
              "name": "[format('{0}/{1}/{2}', variables('apimName'), 'internal-train-api', 'internal-test-call')]",
              "properties": {
                "displayName": "Internal Train API test call",
                "method": "POST",
                "urlTemplate": "/",
                "templateParameters": [],
                "request": {
                  "queryParameters": [
                    {
                      "name": "modelName",
                      "type": "string",
                      "values": [
                        "mymodel"
                      ]
                    }
                  ],
                  "headers": [],
                  "representations": []
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', variables('apimName'))]",
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimName'), 'internal-train-api')]"
              ]
            },
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[parameters('apimPrivateDnsZoneName')]",
              "location": "global",
              "tags": "[parameters('tags')]",
              "properties": {}
            },
            {
              "type": "Microsoft.Network/privateDnsZones/A",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', parameters('apimPrivateDnsZoneName'), 'api')]",
              "properties": {
                "aRecords": [
                  {
                    "ipv4Address": "[reference(resourceId('Microsoft.ApiManagement/service', variables('apimName'))).privateIPAddresses[0]]"
                  }
                ],
                "ttl": 3600
              },
              "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', variables('apimName'))]",
                "[resourceId('Microsoft.Network/privateDnsZones', parameters('apimPrivateDnsZoneName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateDnsZones/A",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', parameters('apimPrivateDnsZoneName'), 'portal')]",
              "properties": {
                "aRecords": [
                  {
                    "ipv4Address": "[reference(resourceId('Microsoft.ApiManagement/service', variables('apimName'))).privateIPAddresses[0]]"
                  }
                ],
                "ttl": 3600
              },
              "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', variables('apimName'))]",
                "[resourceId('Microsoft.Network/privateDnsZones', parameters('apimPrivateDnsZoneName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}-hub-link', parameters('apimPrivateDnsZoneName'), parameters('apimPrivateDnsZoneName'))]",
              "tags": "[parameters('tags')]",
              "location": "global",
              "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                  "id": "[parameters('hubVnetId')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', parameters('apimPrivateDnsZoneName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}-spoke-link', parameters('apimPrivateDnsZoneName'), parameters('apimPrivateDnsZoneName'))]",
              "tags": "[parameters('tags')]",
              "location": "global",
              "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                  "id": "[parameters('spokeVnetId')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', parameters('apimPrivateDnsZoneName'))]"
              ]
            }
          ],
          "outputs": {
            "apimPrivateIpAddress": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ApiManagement/service', variables('apimName'))).privateIPAddresses[0]]"
            },
            "apimDnsName": {
              "type": "array",
              "value": "[split(replace(reference(resourceId('Microsoft.ApiManagement/service', variables('apimName'))).gatewayUrl, 'https://', ''), '.')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'azureFirewallDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'funcAppModule')]",
        "[resourceId('Microsoft.Resources/deployments', 'hubVNetDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'keyVaultDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'spokeVNetDeployment')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "apimDeploymentUpdate",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "tags": {
            "value": "[parameters('tags')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "apimPrivateDnsZoneName": {
            "value": "[parameters('domainName')]"
          },
          "hubVnetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'hubVNetDeployment'), '2019-10-01').outputs.vnetRef.value]"
          },
          "spokeVnetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'spokeVNetDeployment'), '2019-10-01').outputs.vnetRef.value]"
          },
          "webAppUrl": {
            "value": "[format('https://{0}', reference(resourceId('Microsoft.Resources/deployments', 'funcAppModule'), '2019-10-01').outputs.funcAppUrl.value)]"
          },
          "apimSku": {
            "value": {
              "name": "Developer",
              "capacity": 1
            }
          },
          "deployCertificates": {
            "value": true
          },
          "gatewayHostName": {
            "value": "[format('{0}.{1}', parameters('apiHostName'), parameters('domainName'))]"
          },
          "portalHostName": {
            "value": "[format('{0}.{1}', parameters('portalHostName'), parameters('domainName'))]"
          },
          "subnetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'hubVNetDeployment'), '2019-10-01').outputs.subnetRefs.value[1].id]"
          },
          "keyVaultName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'keyVaultDeployment'), '2019-10-01').outputs.keyVaultName.value]"
          },
          "keyVaultUri": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'keyVaultDeployment'), '2019-10-01').outputs.keyVaultUri.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.63.48766",
              "templateHash": "4231234499862856084"
            }
          },
          "parameters": {
            "apimSku": {
              "type": "object",
              "defaultValue": {
                "name": "Developer",
                "capacity": 1
              }
            },
            "portalHostName": {
              "type": "string",
              "defaultValue": "portal.kainiindustries.net"
            },
            "gatewayHostName": {
              "type": "string",
              "defaultValue": "api.kainiindustries.net"
            },
            "subnetId": {
              "type": "string"
            },
            "keyVaultUri": {
              "type": "string"
            },
            "keyVaultName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "deployCertificates": {
              "type": "bool",
              "defaultValue": false
            },
            "tags": {
              "type": "object"
            },
            "apimPrivateDnsZoneName": {
              "type": "string"
            },
            "hubVnetId": {
              "type": "string"
            },
            "spokeVnetId": {
              "type": "string"
            },
            "webAppUrl": {
              "type": "string"
            }
          },
          "functions": [],
          "variables": {
            "suffix": "[uniqueString(resourceGroup().id)]",
            "apimName": "[format('api-mgmt-{0}', variables('suffix'))]",
            "apimServiceIdentityResourceId": "[format('{0}/providers/Microsoft.ManagedIdentity/Identities/default', resourceId('Microsoft.ApiManagement/service', variables('apimName')))]",
            "hostNameConfigurations": [
              {
                "type": "Portal",
                "keyVaultId": "[format('{0}secrets/portal', parameters('keyVaultUri'))]",
                "defaultSslBinding": false,
                "hostName": "[parameters('portalHostName')]",
                "negotiateClientCertificate": false
              },
              {
                "type": "Proxy",
                "keyVaultId": "[format('{0}secrets/api', parameters('keyVaultUri'))]",
                "defaultSslBinding": false,
                "hostName": "[parameters('gatewayHostName')]",
                "negotiateClientCertificate": true
              }
            ]
          },
          "resources": [
            {
              "type": "Microsoft.ApiManagement/service",
              "apiVersion": "2018-06-01-preview",
              "name": "[variables('apimName')]",
              "location": "[parameters('location')]",
              "sku": "[parameters('apimSku')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "publisherEmail": "cbellee@microsoft.com",
                "publisherName": "KainiIndustries",
                "notificationSenderEmail": "apim-noreply@mail.windowsazure.com",
                "hostnameConfigurations": "[if(parameters('deployCertificates'), variables('hostNameConfigurations'), json('null'))]",
                "virtualNetworkConfiguration": {
                  "subnetResourceId": "[parameters('subnetId')]"
                },
                "customProperties": {
                  "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10": "False",
                  "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11": "False",
                  "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Ssl30": "False",
                  "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168": "False",
                  "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls10": "False",
                  "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls11": "False",
                  "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Ssl30": "False",
                  "Microsoft.WindowsAzure.ApiManagement.Gateway.Protocols.Server.Http2": "False"
                },
                "virtualNetworkType": "Internal"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/accessPolicies",
              "apiVersion": "2021-04-01-preview",
              "name": "[format('{0}/add', parameters('keyVaultName'))]",
              "properties": {
                "accessPolicies": [
                  {
                    "tenantId": "[subscription().tenantId]",
                    "objectId": "[reference(variables('apimServiceIdentityResourceId'), '2015-08-31-PREVIEW', 'Full').properties.principalId]",
                    "permissions": {
                      "secrets": [
                        "get"
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', variables('apimName'))]"
              ]
            },
            {
              "type": "Microsoft.ApiManagement/service/products",
              "apiVersion": "2021-01-01-preview",
              "name": "[format('{0}/myProduct', variables('apimName'))]",
              "properties": {
                "displayName": "My Product",
                "description": "My Product",
                "terms": "Terms for example product",
                "subscriptionRequired": false,
                "state": "published"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', variables('apimName'))]"
              ]
            },
            {
              "type": "Microsoft.ApiManagement/service/apis",
              "apiVersion": "2021-01-01-preview",
              "name": "[format('{0}/{1}', variables('apimName'), 'external-report-api')]",
              "properties": {
                "displayName": "External Report API",
                "subscriptionRequired": false,
                "apiRevision": "1",
                "serviceUrl": "[format('{0}/api/v1/report', parameters('webAppUrl'))]",
                "path": "external/report",
                "protocols": [
                  "https"
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', variables('apimName'))]"
              ]
            },
            {
              "type": "Microsoft.ApiManagement/service/apis",
              "apiVersion": "2021-01-01-preview",
              "name": "[format('{0}/{1}', variables('apimName'), 'internal-train-api')]",
              "properties": {
                "displayName": "Internal Train API",
                "subscriptionRequired": false,
                "apiRevision": "1",
                "serviceUrl": "[format('{0}/api/v1/train', parameters('webAppUrl'))]",
                "path": "internal/train",
                "protocols": [
                  "https"
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', variables('apimName'))]"
              ]
            },
            {
              "type": "Microsoft.ApiManagement/service/apis/operations",
              "apiVersion": "2021-01-01-preview",
              "name": "[format('{0}/{1}/{2}', variables('apimName'), 'external-report-api', 'external-test-call')]",
              "properties": {
                "displayName": "External Report API test call",
                "method": "GET",
                "urlTemplate": "/",
                "templateParameters": [],
                "request": {
                  "headers": [],
                  "representations": []
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', variables('apimName'))]",
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimName'), 'external-report-api')]"
              ]
            },
            {
              "type": "Microsoft.ApiManagement/service/apis/operations",
              "apiVersion": "2021-01-01-preview",
              "name": "[format('{0}/{1}/{2}', variables('apimName'), 'internal-train-api', 'internal-test-call')]",
              "properties": {
                "displayName": "Internal Train API test call",
                "method": "POST",
                "urlTemplate": "/",
                "templateParameters": [],
                "request": {
                  "queryParameters": [
                    {
                      "name": "modelName",
                      "type": "string",
                      "values": [
                        "mymodel"
                      ]
                    }
                  ],
                  "headers": [],
                  "representations": []
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', variables('apimName'))]",
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimName'), 'internal-train-api')]"
              ]
            },
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[parameters('apimPrivateDnsZoneName')]",
              "location": "global",
              "tags": "[parameters('tags')]",
              "properties": {}
            },
            {
              "type": "Microsoft.Network/privateDnsZones/A",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', parameters('apimPrivateDnsZoneName'), 'api')]",
              "properties": {
                "aRecords": [
                  {
                    "ipv4Address": "[reference(resourceId('Microsoft.ApiManagement/service', variables('apimName'))).privateIPAddresses[0]]"
                  }
                ],
                "ttl": 3600
              },
              "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', variables('apimName'))]",
                "[resourceId('Microsoft.Network/privateDnsZones', parameters('apimPrivateDnsZoneName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateDnsZones/A",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', parameters('apimPrivateDnsZoneName'), 'portal')]",
              "properties": {
                "aRecords": [
                  {
                    "ipv4Address": "[reference(resourceId('Microsoft.ApiManagement/service', variables('apimName'))).privateIPAddresses[0]]"
                  }
                ],
                "ttl": 3600
              },
              "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', variables('apimName'))]",
                "[resourceId('Microsoft.Network/privateDnsZones', parameters('apimPrivateDnsZoneName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}-hub-link', parameters('apimPrivateDnsZoneName'), parameters('apimPrivateDnsZoneName'))]",
              "tags": "[parameters('tags')]",
              "location": "global",
              "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                  "id": "[parameters('hubVnetId')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', parameters('apimPrivateDnsZoneName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}-spoke-link', parameters('apimPrivateDnsZoneName'), parameters('apimPrivateDnsZoneName'))]",
              "tags": "[parameters('tags')]",
              "location": "global",
              "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                  "id": "[parameters('spokeVnetId')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', parameters('apimPrivateDnsZoneName'))]"
              ]
            }
          ],
          "outputs": {
            "apimPrivateIpAddress": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ApiManagement/service', variables('apimName'))).privateIPAddresses[0]]"
            },
            "apimDnsName": {
              "type": "array",
              "value": "[split(replace(reference(resourceId('Microsoft.ApiManagement/service', variables('apimName'))).gatewayUrl, 'https://', ''), '.')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'apimDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'funcAppModule')]",
        "[resourceId('Microsoft.Resources/deployments', 'hubVNetDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'keyVaultDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'spokeVNetDeployment')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "applicationGatewayDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "suffix": {
            "value": "[variables('suffix')]"
          },
          "apiHostName": {
            "value": "[format('{0}.{1}', parameters('apiHostName'), parameters('domainName'))]"
          },
          "portalHostName": {
            "value": "[format('{0}.{1}', parameters('portalHostName'), parameters('domainName'))]"
          },
          "apimGatewaySslCert": {
            "reference": {
              "keyVault": {
                "id": "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
              },
              "secretName": "api"
            }
          },
          "apimPortalSslCert": {
            "reference": {
              "keyVault": {
                "id": "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
              },
              "secretName": "portal"
            }
          },
          "frontEndPort": {
            "value": 443
          },
          "gatewaySku": {
            "value": {
              "name": "WAF_v2",
              "tier": "WAF_v2",
              "capacity": "1"
            }
          },
          "requestTimeOut": {
            "value": 180
          },
          "skuName": {
            "value": "Standard"
          },
          "subnetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'hubVNetDeployment'), '2019-10-01').outputs.subnetRefs.value[0].id]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.63.48766",
              "templateHash": "12800927273176372982"
            }
          },
          "parameters": {
            "suffix": {
              "type": "string"
            },
            "skuName": {
              "type": "string",
              "defaultValue": "Standard"
            },
            "gatewaySku": {
              "type": "object",
              "defaultValue": {
                "name": "WAF_v2",
                "tier": "WAF_v2",
                "capacity": "1"
              }
            },
            "subnetId": {
              "type": "string"
            },
            "apimPortalSslCert": {
              "type": "secureString"
            },
            "apimGatewaySslCert": {
              "type": "secureString"
            },
            "frontEndPort": {
              "type": "int",
              "defaultValue": 443
            },
            "requestTimeOut": {
              "type": "int",
              "defaultValue": 180
            },
            "apiHostName": {
              "type": "string",
              "defaultValue": "api.kainiindustries.net"
            },
            "portalHostName": {
              "type": "string",
              "defaultValue": "portal.kainiindustries.net"
            }
          },
          "functions": [],
          "variables": {
            "pipName_var": "[format('appgwy-pip-{0}', parameters('suffix'))]",
            "appGwyName": "[format('appgwy-{0}', parameters('suffix'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Network/publicIPAddresses",
              "apiVersion": "2021-02-01",
              "name": "[variables('pipName_var')]",
              "location": "[resourceGroup().location]",
              "sku": {
                "name": "[parameters('skuName')]"
              },
              "properties": {
                "dnsSettings": {
                  "domainNameLabel": "[variables('appGwyName')]"
                },
                "publicIPAddressVersion": "IPv4",
                "publicIPAllocationMethod": "Static",
                "idleTimeoutInMinutes": 4,
                "ipTags": []
              }
            },
            {
              "type": "Microsoft.Network/applicationGateways",
              "apiVersion": "2021-02-01",
              "name": "[variables('appGwyName')]",
              "location": "[resourceGroup().location]",
              "properties": {
                "sku": "[parameters('gatewaySku')]",
                "gatewayIPConfigurations": [
                  {
                    "name": "gateway-ip",
                    "properties": {
                      "subnet": {
                        "id": "[parameters('subnetId')]"
                      }
                    }
                  }
                ],
                "sslCertificates": [
                  {
                    "name": "apim-gateway-cert",
                    "properties": {
                      "data": "[parameters('apimGatewaySslCert')]",
                      "password": ""
                    }
                  },
                  {
                    "name": "apim-portal-cert",
                    "properties": {
                      "data": "[parameters('apimPortalSslCert')]",
                      "password": ""
                    }
                  }
                ],
                "authenticationCertificates": [],
                "frontendIPConfigurations": [
                  {
                    "name": "frontend",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "publicIPAddress": {
                        "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('pipName_var'))]"
                      }
                    }
                  }
                ],
                "frontendPorts": [
                  {
                    "name": "frontend-port",
                    "properties": {
                      "port": "[parameters('frontEndPort')]"
                    }
                  }
                ],
                "backendAddressPools": [
                  {
                    "name": "apim-backend",
                    "properties": {
                      "backendAddresses": [
                        {
                          "fqdn": "[parameters('apiHostName')]"
                        }
                      ]
                    }
                  },
                  {
                    "name": "apim-portal-backend",
                    "properties": {
                      "backendAddresses": [
                        {
                          "fqdn": "[parameters('portalHostName')]"
                        }
                      ]
                    }
                  },
                  {
                    "name": "sinkpool",
                    "properties": {
                      "backendAddresses": []
                    }
                  }
                ],
                "backendHttpSettingsCollection": [
                  {
                    "name": "apim-gateway-poolsetting",
                    "properties": {
                      "port": "[parameters('frontEndPort')]",
                      "protocol": "Https",
                      "cookieBasedAffinity": "Disabled",
                      "pickHostNameFromBackendAddress": false,
                      "requestTimeout": "[parameters('requestTimeOut')]",
                      "probe": {
                        "id": "[resourceId('Microsoft.Network/applicationGateways/probes', variables('appGwyName'), 'apim-gateway-probe')]"
                      }
                    }
                  },
                  {
                    "name": "apim-portal-poolsetting",
                    "properties": {
                      "port": "[parameters('frontEndPort')]",
                      "protocol": "Https",
                      "cookieBasedAffinity": "Disabled",
                      "pickHostNameFromBackendAddress": false,
                      "requestTimeout": "[parameters('requestTimeOut')]",
                      "probe": {
                        "id": "[resourceId('Microsoft.Network/applicationGateways/probes', variables('appGwyName'), 'apim-portal-probe')]"
                      }
                    }
                  }
                ],
                "httpListeners": [
                  {
                    "name": "apim-gateway-listener",
                    "properties": {
                      "frontendIPConfiguration": {
                        "id": "[resourceId('Microsoft.Network/applicationGateways/frontendIPConfigurations', variables('appGwyName'), 'frontend')]"
                      },
                      "frontendPort": {
                        "id": "[resourceId('Microsoft.Network/applicationGateways/frontendPorts', variables('appGwyName'), 'frontend-port')]"
                      },
                      "protocol": "Https",
                      "sslCertificate": {
                        "id": "[resourceId('Microsoft.Network/applicationGateways/sslCertificates', variables('appGwyName'), 'apim-gateway-cert')]"
                      },
                      "hostName": "[parameters('apiHostName')]",
                      "requireServerNameIndication": true,
                      "customErrorConfigurations": []
                    }
                  },
                  {
                    "name": "apim-portal-listener",
                    "properties": {
                      "frontendIPConfiguration": {
                        "id": "[resourceId('Microsoft.Network/applicationGateways/frontendIPConfigurations', variables('appGwyName'), 'frontend')]"
                      },
                      "frontendPort": {
                        "id": "[resourceId('Microsoft.Network/applicationGateways/frontendPorts', variables('appGwyName'), 'frontend-port')]"
                      },
                      "protocol": "Https",
                      "sslCertificate": {
                        "id": "[resourceId('Microsoft.Network/applicationGateways/sslCertificates', variables('appGwyName'), 'apim-portal-cert')]"
                      },
                      "hostName": "[parameters('portalHostName')]",
                      "requireServerNameIndication": true,
                      "customErrorConfigurations": []
                    }
                  }
                ],
                "urlPathMaps": [
                  {
                    "name": "external-urlpathmapconfig",
                    "properties": {
                      "defaultBackendAddressPool": {
                        "id": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools', variables('appGwyName'), 'apim-backend')]"
                      },
                      "defaultBackendHttpSettings": {
                        "id": "[resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection', variables('appGwyName'), 'apim-gateway-poolsetting')]"
                      },
                      "pathRules": [
                        {
                          "name": "external",
                          "properties": {
                            "paths": [
                              "/external/*"
                            ],
                            "backendAddressPool": {
                              "id": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools', variables('appGwyName'), 'apim-backend')]"
                            },
                            "backendHttpSettings": {
                              "id": "[resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection', variables('appGwyName'), 'apim-gateway-poolsetting')]"
                            }
                          }
                        }
                      ]
                    }
                  }
                ],
                "requestRoutingRules": [
                  {
                    "name": "apim-portal-rule",
                    "properties": {
                      "ruleType": "Basic",
                      "httpListener": {
                        "id": "[resourceId('Microsoft.Network/applicationGateways/httpListeners', variables('appGwyName'), 'apim-portal-listener')]"
                      },
                      "backendAddressPool": {
                        "id": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools', variables('appGwyName'), 'apim-portal-backend')]"
                      },
                      "backendHttpSettings": {
                        "id": "[resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection', variables('appGwyName'), 'apim-portal-poolsetting')]"
                      }
                    }
                  },
                  {
                    "name": "apim-gateway-external-rule",
                    "properties": {
                      "ruleType": "PathBasedRouting",
                      "httpListener": {
                        "id": "[resourceId('Microsoft.Network/applicationGateways/httpListeners', variables('appGwyName'), 'apim-gateway-listener')]"
                      },
                      "urlPathMap": {
                        "id": "[resourceId('Microsoft.Network/applicationGateways/urlPathMaps', variables('appGwyName'), 'external-urlpathmapconfig')]"
                      }
                    }
                  }
                ],
                "probes": [
                  {
                    "name": "apim-gateway-probe",
                    "properties": {
                      "protocol": "Https",
                      "host": "[parameters('apiHostName')]",
                      "path": "/status-0123456789abcdef",
                      "interval": 30,
                      "timeout": 120,
                      "unhealthyThreshold": 8,
                      "pickHostNameFromBackendHttpSettings": false,
                      "minServers": 0,
                      "match": {}
                    }
                  },
                  {
                    "name": "apim-portal-probe",
                    "properties": {
                      "protocol": "Https",
                      "host": "[parameters('portalHostName')]",
                      "path": "/signin",
                      "interval": 60,
                      "timeout": 300,
                      "unhealthyThreshold": 8,
                      "pickHostNameFromBackendHttpSettings": false,
                      "minServers": 0,
                      "match": {}
                    }
                  }
                ],
                "rewriteRuleSets": [],
                "redirectConfigurations": [],
                "webApplicationFirewallConfiguration": {
                  "enabled": true,
                  "firewallMode": "Prevention",
                  "ruleSetType": "OWASP",
                  "ruleSetVersion": "3.0",
                  "disabledRuleGroups": [],
                  "exclusions": [],
                  "requestBodyCheck": true,
                  "maxRequestBodySizeInKb": 128,
                  "fileUploadLimitInMb": 100
                },
                "customErrorConfigurations": []
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', variables('pipName_var'))]"
              ]
            }
          ],
          "outputs": {
            "appGwyName": {
              "type": "string",
              "value": "[variables('appGwyName')]"
            },
            "appGwyId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/applicationGateways', variables('appGwyName'))]"
            },
            "appGwyPublicDnsName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', variables('pipName_var'))).dnsSettings.fqdn]"
            },
            "appGwyPublicIpAddress": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', variables('pipName_var'))).ipAddress]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'hubVNetDeployment')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "nsgUpdateDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "suffix": {
            "value": "[variables('suffix')]"
          },
          "appGatewayPublicIpAddress": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'applicationGatewayDeployment'), '2019-10-01').outputs.appGwyPublicIpAddress.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.63.48766",
              "templateHash": "2544413799695470535"
            }
          },
          "parameters": {
            "suffix": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "appGatewayPublicIpAddress": {
              "type": "string"
            }
          },
          "functions": [],
          "resources": [
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2021-02-01",
              "name": "[format('appGateway-subnet-nsg-{0}', parameters('suffix'))]",
              "location": "[parameters('location')]",
              "properties": {
                "securityRules": [
                  {
                    "name": "appgwy-v1",
                    "properties": {
                      "description": "This rule is needed for application gateway probes to work",
                      "protocol": "*",
                      "destinationAddressPrefix": "*",
                      "sourcePortRange": "*",
                      "destinationPortRange": "65503-65534",
                      "sourceAddressPrefix": "Internet",
                      "access": "Allow",
                      "priority": 1000,
                      "direction": "Inbound"
                    }
                  },
                  {
                    "name": "appgwy-v2",
                    "properties": {
                      "description": "This rule is needed for application gateway probes to work",
                      "protocol": "*",
                      "destinationAddressPrefix": "*",
                      "sourcePortRange": "*",
                      "destinationPortRange": "65200-65535",
                      "sourceAddressPrefix": "Internet",
                      "access": "Allow",
                      "priority": 1010,
                      "direction": "Inbound"
                    }
                  },
                  {
                    "name": "appgwy-inbound-internet",
                    "properties": {
                      "description": "This rule is needed for application gateway probes to work",
                      "protocol": "Tcp",
                      "destinationAddressPrefix": "VirtualNetwork",
                      "sourcePortRange": "*",
                      "destinationPortRange": "",
                      "destinationPortRanges": [
                        "443"
                      ],
                      "sourceAddressPrefix": "Internet",
                      "access": "Allow",
                      "priority": 1020,
                      "direction": "Inbound"
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2021-02-01",
              "name": "[format('apim-subnet-nsg-{0}', parameters('suffix'))]",
              "location": "[parameters('location')]",
              "properties": {
                "securityRules": [
                  {
                    "name": "allow-inbound-apim-mgmt",
                    "properties": {
                      "description": "allow-inbound-apim-mgmt",
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "3443",
                      "sourceAddressPrefix": "ApiManagement",
                      "destinationAddressPrefix": "VirtualNetwork",
                      "access": "Allow",
                      "priority": 1010,
                      "direction": "Inbound"
                    }
                  },
                  {
                    "name": "allow-inbound-app-gwy",
                    "properties": {
                      "description": "allow-inbound-app-gwy",
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "3443",
                      "sourceAddressPrefix": "[parameters('appGatewayPublicIpAddress')]",
                      "destinationAddressPrefix": "VirtualNetwork",
                      "access": "Allow",
                      "priority": 1020,
                      "direction": "Inbound"
                    }
                  },
                  {
                    "name": "allow-outbound-apim-sql",
                    "properties": {
                      "description": "allow-outbound-apim-sql",
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "1443",
                      "sourceAddressPrefix": "VirtualNetwork",
                      "destinationAddressPrefix": "Sql",
                      "access": "Allow",
                      "priority": 1000,
                      "direction": "Outbound"
                    }
                  },
                  {
                    "name": "allow-outbound-apim-storage",
                    "properties": {
                      "description": "allow-outbound-apim-storage",
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "",
                      "destinationPortRanges": [
                        "80",
                        "443"
                      ],
                      "sourceAddressPrefix": "VirtualNetwork",
                      "destinationAddressPrefix": "Storage",
                      "access": "Allow",
                      "priority": 1010,
                      "direction": "Outbound"
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'applicationGatewayDeployment')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "mySqlFlexServer",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "administratorLogin": {
            "value": "dbadmin"
          },
          "administratorLoginPassword": {
            "value": "P@ssword123"
          },
          "mySqlDatabaseName": {
            "value": "todolist"
          },
          "backupRetentionDays": {
            "value": 7
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "suffix": {
            "value": "[variables('suffix')]"
          },
          "subnetArmResourceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'spokeVNetDeployment'), '2019-10-01').outputs.subnetRefs.value[1].id]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.63.48766",
              "templateHash": "11557731694654736797"
            }
          },
          "parameters": {
            "administratorLogin": {
              "type": "string",
              "defaultValue": "dbadmin"
            },
            "administratorLoginPassword": {
              "type": "secureString"
            },
            "location": {
              "type": "string"
            },
            "suffix": {
              "type": "string"
            },
            "serverEdition": {
              "type": "string",
              "defaultValue": "GeneralPurpose"
            },
            "vCores": {
              "type": "int",
              "defaultValue": 2
            },
            "storageSizeMB": {
              "type": "int",
              "defaultValue": 10240
            },
            "haEnabled": {
              "type": "string",
              "defaultValue": "Enabled"
            },
            "availabilityZone": {
              "type": "string",
              "defaultValue": ""
            },
            "version": {
              "type": "string",
              "defaultValue": "8.0.21"
            },
            "subnetArmResourceId": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "backupRetentionDays": {
              "type": "int",
              "defaultValue": 7
            },
            "geoRedundantBackup": {
              "type": "string",
              "defaultValue": "Disabled"
            },
            "vmSkuName": {
              "type": "string",
              "defaultValue": "Standard_D2ds_v4"
            },
            "mySqlDatabaseName": {
              "type": "string",
              "defaultValue": "todolist"
            },
            "publicNetworkAccess": {
              "type": "string",
              "defaultValue": "Disabled",
              "metadata": {
                "description": "Value should be either Enabled or Disabled"
              }
            },
            "storageIops": {
              "type": "int",
              "defaultValue": 100
            }
          },
          "functions": [],
          "variables": {
            "serverName": "[format('mysql-flex-server-{0}', parameters('suffix'))]",
            "firewallRuleName": "[format('{0}-fw-rules', variables('serverName'))]"
          },
          "resources": [
            {
              "type": "Microsoft.DBforMySQL/flexibleServers",
              "apiVersion": "2020-07-01-privatepreview",
              "name": "[variables('serverName')]",
              "location": "[parameters('location')]",
              "properties": {
                "version": "[parameters('version')]",
                "administratorLogin": "[parameters('administratorLogin')]",
                "administratorLoginPassword": "[parameters('administratorLoginPassword')]",
                "publicNetworkAccess": "[parameters('publicNetworkAccess')]",
                "DelegatedSubnetArguments": {
                  "subnetArmResourceId": "[parameters('subnetArmResourceId')]"
                },
                "haEnabled": "[parameters('haEnabled')]",
                "storageProfile": {
                  "storageMB": "[parameters('storageSizeMB')]",
                  "backupRetentionDays": "[parameters('backupRetentionDays')]",
                  "geoRedundantBackup": "[parameters('geoRedundantBackup')]",
                  "storageIops": "[parameters('storageIops')]"
                },
                "availabilityZone": "[parameters('availabilityZone')]"
              },
              "sku": {
                "name": "[parameters('vmSkuName')]",
                "tier": "[parameters('serverEdition')]",
                "capacity": "[parameters('vCores')]"
              },
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.DBForMySql/flexibleServers/firewallRules",
              "apiVersion": "2020-07-01-preview",
              "name": "[format('{0}/{1}', variables('serverName'), variables('firewallRuleName'))]",
              "properties": {
                "startIpAddress": "0.0.0.0",
                "endIpAddress": "0.0.0.0"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DBforMySQL/flexibleServers', variables('serverName'))]"
              ]
            },
            {
              "type": "Microsoft.DBForMySql/flexibleServers/databases",
              "apiVersion": "2020-07-01-preview",
              "name": "[format('{0}/{1}', variables('serverName'), parameters('mySqlDatabaseName'))]",
              "dependsOn": [
                "[resourceId('Microsoft.DBforMySQL/flexibleServers', variables('serverName'))]"
              ]
            }
          ],
          "outputs": {
            "mySqlServerName": {
              "type": "string",
              "value": "[variables('serverName')]"
            },
            "mySqlDatabaseName": {
              "type": "string",
              "value": "[parameters('mySqlDatabaseName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'spokeVNetDeployment')]"
      ]
    }
  ],
  "outputs": {
    "appGwyName": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'applicationGatewayDeployment'), '2019-10-01').outputs.appGwyName.value]"
    },
    "appGwyId": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'applicationGatewayDeployment'), '2019-10-01').outputs.appGwyId.value]"
    }
  }
}