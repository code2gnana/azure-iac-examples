# specific path build
trigger:
  branches:
    include:
    - master
    - develop
  paths:
    include:
    - terraform/aks-private-endpoint-fw/*
    exclude:
    - terraform/aks-private-endpoint-fw/azure-pipelines.yml

variables:
  # ADO_SERVICE_CONNECTION_NAME: # pipeline variable set in GUI
  # HOME_PUBLIC_IP_ADDRESS #  variable set in GUI
  # SSH_KEY # pipeline variable set in GUI
  # SHARED_VPN_SECRET # pipeline variable set in GUI
  # TF_STATE_STORAGE_ACCOUNT_NAME # pipeline variable set in GUI
  TF_PATH: ./terraform/aks-private-endpoint-fw/terraform

stages:
- stage: dev
  displayName: 'Deploy infrastructure to the dev environment'
  jobs:
  - deployment: deploy_aks_infra
    displayName: deploy AKS infrastructure
    pool:
      vmImage: 'ubuntu-latest'
    environment: aks-private-fw
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - task: AzureCLI@2
            displayName: 'Setup authentication for Terraform'
            inputs:
              azureSubscription: $(ADO_SERVICE_CONNECTION_NAME)
              addSpnToEnvironment: true # ensures 'servicePrincipalId' & 'servicePrincipalKey' values are available to Terraform
              failOnStandardError: true
              scriptLocation: inlineScript
              scriptType: pscore
              inlineScript: |   
                # set Terraform authN variables
                Write-Host "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$(az account show | ConvertFrom-Json | Select-Object -expandProperty id)"
                Write-Host "##vso[task.setvariable variable=ARM_CLIENT_ID]$env:servicePrincipalId"
                Write-Host "##vso[task.setvariable variable=ARM_CLIENT_SECRET]$env:servicePrincipalKey"
                Write-Host "##vso[task.setvariable variable=ARM_TENANT_ID]$(az account show | ConvertFrom-Json | Select-Object -expandProperty tenantId)"
                Write-Host "##vso[task.setvariable variable=ARM_ACCESS_KEY]$((az storage account keys list -n $(TF_STATE_STORAGE_ACCOUNT_NAME) | ConvertFrom-Json)[0].value)"
          - task: AzureCLI@2
            displayName: 'Deploy AKS Infrastructure'
            inputs:
              azureSubscription: $(ADO_SERVICE_CONNECTION_NAME)
              scriptType: pscore
              scriptLocation: inlineScript
              workingDirectory: $(TF_PATH)
              inlineScript: |               
                # Initialize Terraform
                Write-Host "############# Terraform init ############"
                terraform init -input=false

                # Create plan
                Write-Host "############# Terraform plan ############"
                terraform plan -var 'home_public_ip_address=$(HOME_PUBLIC_IP_ADDRESS)' -var 'ssh_key=$(SSH_KEY)' -var 'shared_vpn_secret=$(SHARED_VPN_SECRET)' -out tfplan 

                # Show plan
                Write-Host "############# Terraform show ############"
                $plan = terraform show -json | ConvertFrom-Json
                Write-Host $plan.values

                # Apply plan
                Write-Host "############# Terraform apply ############"
                terraform apply -auto-approve tfplan

                # Output apply
                # Set Terraform output as pipeline environment variables
                Write-Host "############# Terraform output ############"
                $tfOutput = terraform output -json | ConvertFrom-Json
                Write-Host "##vso[task.setvariable variable=RESOURCE_GROUP_NAME]$($tfOutput.'resource-group-name'.value)"
                Write-Host "##vso[task.setvariable variable=CLUSTER_NAME]$($tfOutput.'aks-cluster-name'.value)"
                Write-Host "##vso[task.setvariable variable=CLUSTER_RESOURCE_GROUP_NAME]$($tfOutput.'aks-node-rg'.value)"
                Write-Host "##vso[task.setvariable variable=CLUSTER_ID]$($tfOutput.'aks-cluster-id'.value)"
                Write-Host "##vso[task.setvariable variable=KUBECONFIG]$($tfOutput.'kube-config'.value)"           

          - task: Kubernetes@1
            displayName: 'Get AKS nodes'
            inputs:
               command: get
               arguments: nodes
               connectionType: Azure Resource Manager
               azureSubscriptionEndpoint: $(ADO_SERVICE_CONNECTION_NAME)
               azureResourceGroup: $(RESOURCE_GROUP_NAME)
               kubernetesCluster: $(CLUSTER_NAME)
               useClusterAdmin: true

